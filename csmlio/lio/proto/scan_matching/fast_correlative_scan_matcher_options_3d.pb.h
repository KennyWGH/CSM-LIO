// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/scan_matching/fast_correlative_scan_matcher_options_3d.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace csmlio {
namespace mapping {
namespace scan_matching {
namespace proto {
class FastCorrelativeScanMatcherOptions3D;
class FastCorrelativeScanMatcherOptions3DDefaultTypeInternal;
extern FastCorrelativeScanMatcherOptions3DDefaultTypeInternal _FastCorrelativeScanMatcherOptions3D_default_instance_;
}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace csmlio

namespace csmlio {
namespace mapping {
namespace scan_matching {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto

// ===================================================================

class FastCorrelativeScanMatcherOptions3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D) */ {
 public:
  FastCorrelativeScanMatcherOptions3D();
  virtual ~FastCorrelativeScanMatcherOptions3D();

  FastCorrelativeScanMatcherOptions3D(const FastCorrelativeScanMatcherOptions3D& from);

  inline FastCorrelativeScanMatcherOptions3D& operator=(const FastCorrelativeScanMatcherOptions3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastCorrelativeScanMatcherOptions3D(FastCorrelativeScanMatcherOptions3D&& from) noexcept
    : FastCorrelativeScanMatcherOptions3D() {
    *this = ::std::move(from);
  }

  inline FastCorrelativeScanMatcherOptions3D& operator=(FastCorrelativeScanMatcherOptions3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastCorrelativeScanMatcherOptions3D& default_instance();

  static inline const FastCorrelativeScanMatcherOptions3D* internal_default_instance() {
    return reinterpret_cast<const FastCorrelativeScanMatcherOptions3D*>(
               &_FastCorrelativeScanMatcherOptions3D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FastCorrelativeScanMatcherOptions3D* other);
  friend void swap(FastCorrelativeScanMatcherOptions3D& a, FastCorrelativeScanMatcherOptions3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastCorrelativeScanMatcherOptions3D* New() const PROTOBUF_FINAL { return New(NULL); }

  FastCorrelativeScanMatcherOptions3D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FastCorrelativeScanMatcherOptions3D& from);
  void MergeFrom(const FastCorrelativeScanMatcherOptions3D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FastCorrelativeScanMatcherOptions3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double min_rotational_score = 4;
  void clear_min_rotational_score();
  static const int kMinRotationalScoreFieldNumber = 4;
  double min_rotational_score() const;
  void set_min_rotational_score(double value);

  // double linear_xy_search_window = 5;
  void clear_linear_xy_search_window();
  static const int kLinearXySearchWindowFieldNumber = 5;
  double linear_xy_search_window() const;
  void set_linear_xy_search_window(double value);

  // int32 branch_and_bound_depth = 2;
  void clear_branch_and_bound_depth();
  static const int kBranchAndBoundDepthFieldNumber = 2;
  ::google::protobuf::int32 branch_and_bound_depth() const;
  void set_branch_and_bound_depth(::google::protobuf::int32 value);

  // int32 full_resolution_depth = 8;
  void clear_full_resolution_depth();
  static const int kFullResolutionDepthFieldNumber = 8;
  ::google::protobuf::int32 full_resolution_depth() const;
  void set_full_resolution_depth(::google::protobuf::int32 value);

  // double linear_z_search_window = 6;
  void clear_linear_z_search_window();
  static const int kLinearZSearchWindowFieldNumber = 6;
  double linear_z_search_window() const;
  void set_linear_z_search_window(double value);

  // double angular_search_window = 7;
  void clear_angular_search_window();
  static const int kAngularSearchWindowFieldNumber = 7;
  double angular_search_window() const;
  void set_angular_search_window(double value);

  // double min_low_resolution_score = 9;
  void clear_min_low_resolution_score();
  static const int kMinLowResolutionScoreFieldNumber = 9;
  double min_low_resolution_score() const;
  void set_min_low_resolution_score(double value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double min_rotational_score_;
  double linear_xy_search_window_;
  ::google::protobuf::int32 branch_and_bound_depth_;
  ::google::protobuf::int32 full_resolution_depth_;
  double linear_z_search_window_;
  double angular_search_window_;
  double min_low_resolution_score_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FastCorrelativeScanMatcherOptions3D

// int32 branch_and_bound_depth = 2;
inline void FastCorrelativeScanMatcherOptions3D::clear_branch_and_bound_depth() {
  branch_and_bound_depth_ = 0;
}
inline ::google::protobuf::int32 FastCorrelativeScanMatcherOptions3D::branch_and_bound_depth() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.branch_and_bound_depth)
  return branch_and_bound_depth_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_branch_and_bound_depth(::google::protobuf::int32 value) {
  
  branch_and_bound_depth_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.branch_and_bound_depth)
}

// int32 full_resolution_depth = 8;
inline void FastCorrelativeScanMatcherOptions3D::clear_full_resolution_depth() {
  full_resolution_depth_ = 0;
}
inline ::google::protobuf::int32 FastCorrelativeScanMatcherOptions3D::full_resolution_depth() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.full_resolution_depth)
  return full_resolution_depth_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_full_resolution_depth(::google::protobuf::int32 value) {
  
  full_resolution_depth_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.full_resolution_depth)
}

// double min_rotational_score = 4;
inline void FastCorrelativeScanMatcherOptions3D::clear_min_rotational_score() {
  min_rotational_score_ = 0;
}
inline double FastCorrelativeScanMatcherOptions3D::min_rotational_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.min_rotational_score)
  return min_rotational_score_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_min_rotational_score(double value) {
  
  min_rotational_score_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.min_rotational_score)
}

// double min_low_resolution_score = 9;
inline void FastCorrelativeScanMatcherOptions3D::clear_min_low_resolution_score() {
  min_low_resolution_score_ = 0;
}
inline double FastCorrelativeScanMatcherOptions3D::min_low_resolution_score() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.min_low_resolution_score)
  return min_low_resolution_score_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_min_low_resolution_score(double value) {
  
  min_low_resolution_score_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.min_low_resolution_score)
}

// double linear_xy_search_window = 5;
inline void FastCorrelativeScanMatcherOptions3D::clear_linear_xy_search_window() {
  linear_xy_search_window_ = 0;
}
inline double FastCorrelativeScanMatcherOptions3D::linear_xy_search_window() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.linear_xy_search_window)
  return linear_xy_search_window_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_linear_xy_search_window(double value) {
  
  linear_xy_search_window_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.linear_xy_search_window)
}

// double linear_z_search_window = 6;
inline void FastCorrelativeScanMatcherOptions3D::clear_linear_z_search_window() {
  linear_z_search_window_ = 0;
}
inline double FastCorrelativeScanMatcherOptions3D::linear_z_search_window() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.linear_z_search_window)
  return linear_z_search_window_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_linear_z_search_window(double value) {
  
  linear_z_search_window_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.linear_z_search_window)
}

// double angular_search_window = 7;
inline void FastCorrelativeScanMatcherOptions3D::clear_angular_search_window() {
  angular_search_window_ = 0;
}
inline double FastCorrelativeScanMatcherOptions3D::angular_search_window() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.angular_search_window)
  return angular_search_window_;
}
inline void FastCorrelativeScanMatcherOptions3D::set_angular_search_window(double value) {
  
  angular_search_window_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.scan_matching.proto.FastCorrelativeScanMatcherOptions3D.angular_search_window)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace scan_matching
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fscan_5fmatching_2ffast_5fcorrelative_5fscan_5fmatcher_5foptions_5f3d_2eproto__INCLUDED
