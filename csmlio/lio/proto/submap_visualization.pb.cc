// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/submap_visualization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmlio/lio/proto/submap_visualization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmlio {
namespace mapping {
namespace proto {
class SubmapList_SubmapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapList_SubmapEntry>
     _instance;
} _SubmapList_SubmapEntry_default_instance_;
class SubmapList_TrajectorySubmapListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapList_TrajectorySubmapList>
     _instance;
} _SubmapList_TrajectorySubmapList_default_instance_;
class SubmapListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapList>
     _instance;
} _SubmapList_default_instance_;
class SubmapQuery_RequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapQuery_Request>
     _instance;
} _SubmapQuery_Request_default_instance_;
class SubmapQuery_Response_SubmapTextureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapQuery_Response_SubmapTexture>
     _instance;
} _SubmapQuery_Response_SubmapTexture_default_instance_;
class SubmapQuery_ResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapQuery_Response>
     _instance;
} _SubmapQuery_Response_default_instance_;
class SubmapQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapQuery>
     _instance;
} _SubmapQuery_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, submap_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_SubmapEntry, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList_TrajectorySubmapList, submap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapList, trajectory_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, submap_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Request, trajectory_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, cells_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response_SubmapTexture, slice_pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, submap_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, textures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery_Response, error_message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapQuery, response_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SubmapList_SubmapEntry)},
  { 7, -1, sizeof(SubmapList_TrajectorySubmapList)},
  { 13, -1, sizeof(SubmapList)},
  { 19, -1, sizeof(SubmapQuery_Request)},
  { 26, -1, sizeof(SubmapQuery_Response_SubmapTexture)},
  { 36, -1, sizeof(SubmapQuery_Response)},
  { 44, -1, sizeof(SubmapQuery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapList_SubmapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapList_TrajectorySubmapList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapQuery_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapQuery_Response_SubmapTexture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapQuery_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapQuery_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/submap_visualization.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _SubmapList_SubmapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapList_SubmapEntry_default_instance_);_SubmapList_TrajectorySubmapList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapList_TrajectorySubmapList_default_instance_);_SubmapList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapList_default_instance_);_SubmapQuery_Request_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapQuery_Request_default_instance_);_SubmapQuery_Response_SubmapTexture_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapQuery_Response_SubmapTexture_default_instance_);_SubmapQuery_Response_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapQuery_Response_default_instance_);_SubmapQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapQuery_default_instance_);_SubmapList_SubmapEntry_default_instance_._instance.get_mutable()->pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _SubmapQuery_Response_SubmapTexture_default_instance_._instance.get_mutable()->slice_pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _SubmapQuery_default_instance_._instance.get_mutable()->request_ = const_cast< ::csmlio::mapping::proto::SubmapQuery_Request*>(
      ::csmlio::mapping::proto::SubmapQuery_Request::internal_default_instance());
  _SubmapQuery_default_instance_._instance.get_mutable()->response_ = const_cast< ::csmlio::mapping::proto::SubmapQuery_Response*>(
      ::csmlio::mapping::proto::SubmapQuery_Response::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n5cartographer/mapping/proto/submap_visu"
      "alization.proto\022\032cartographer.mapping.pr"
      "oto\032,cartographer/transform/proto/transf"
      "orm.proto\"\225\002\n\nSubmapList\022O\n\ntrajectory\030\002"
      " \003(\0132;.cartographer.mapping.proto.Submap"
      "List.TrajectorySubmapList\032Z\n\013SubmapEntry"
      "\022\026\n\016submap_version\030\001 \001(\005\0223\n\004pose\030\003 \001(\0132%"
      ".cartographer.transform.proto.Rigid3d\032Z\n"
      "\024TrajectorySubmapList\022B\n\006submap\030\001 \003(\01322."
      "cartographer.mapping.proto.SubmapList.Su"
      "bmapEntry\"\350\003\n\013SubmapQuery\022@\n\007request\030\001 \001"
      "(\0132/.cartographer.mapping.proto.SubmapQu"
      "ery.Request\022B\n\010response\030\002 \001(\01320.cartogra"
      "pher.mapping.proto.SubmapQuery.Response\032"
      "6\n\007Request\022\024\n\014submap_index\030\001 \001(\005\022\025\n\rtraj"
      "ectory_id\030\002 \001(\005\032\232\002\n\010Response\022\026\n\016submap_v"
      "ersion\030\002 \001(\005\022P\n\010textures\030\n \003(\0132>.cartogr"
      "apher.mapping.proto.SubmapQuery.Response"
      ".SubmapTexture\022\025\n\rerror_message\030\010 \001(\t\032\214\001"
      "\n\rSubmapTexture\022\r\n\005cells\030\001 \001(\014\022\r\n\005width\030"
      "\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\022\n\nresolution\030\004 \001("
      "\001\0229\n\nslice_pose\030\005 \001(\0132%.cartographer.tra"
      "nsform.proto.Rigid3db\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 908);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/submap_visualization.proto", &protobuf_RegisterTypes);
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapList_SubmapEntry::kSubmapVersionFieldNumber;
const int SubmapList_SubmapEntry::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapList_SubmapEntry::SubmapList_SubmapEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}
SubmapList_SubmapEntry::SubmapList_SubmapEntry(const SubmapList_SubmapEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::csmlio::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  submap_version_ = from.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

void SubmapList_SubmapEntry::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_version_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(submap_version_));
  _cached_size_ = 0;
}

SubmapList_SubmapEntry::~SubmapList_SubmapEntry() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.SubmapEntry)
  SharedDtor();
}

void SubmapList_SubmapEntry::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void SubmapList_SubmapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList_SubmapEntry::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapList_SubmapEntry& SubmapList_SubmapEntry::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapList_SubmapEntry* SubmapList_SubmapEntry::New(::google::protobuf::Arena* arena) const {
  SubmapList_SubmapEntry* n = new SubmapList_SubmapEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapList_SubmapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  submap_version_ = 0;
  _internal_metadata_.Clear();
}

bool SubmapList_SubmapEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 submap_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return false;
#undef DO_
}

void SubmapList_SubmapEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 1;
  if (this->submap_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->submap_version(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapList.SubmapEntry)
}

::google::protobuf::uint8* SubmapList_SubmapEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 1;
  if (this->submap_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->submap_version(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.SubmapEntry)
  return target;
}

size_t SubmapList_SubmapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 3;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int32 submap_version = 1;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList_SubmapEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapList_SubmapEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapList_SubmapEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList.SubmapEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList.SubmapEntry)
    MergeFrom(*source);
  }
}

void SubmapList_SubmapEntry::MergeFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.submap_version() != 0) {
    set_submap_version(from.submap_version());
  }
}

void SubmapList_SubmapEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_SubmapEntry::CopyFrom(const SubmapList_SubmapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.SubmapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_SubmapEntry::IsInitialized() const {
  return true;
}

void SubmapList_SubmapEntry::Swap(SubmapList_SubmapEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapList_SubmapEntry::InternalSwap(SubmapList_SubmapEntry* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(submap_version_, other->submap_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapList_SubmapEntry::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapList_SubmapEntry

// int32 submap_version = 1;
void SubmapList_SubmapEntry::clear_submap_version() {
  submap_version_ = 0;
}
::google::protobuf::int32 SubmapList_SubmapEntry::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
  return submap_version_;
}
void SubmapList_SubmapEntry::set_submap_version(::google::protobuf::int32 value) {
  
  submap_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapList.SubmapEntry.submap_version)
}

// .cartographer.transform.proto.Rigid3d pose = 3;
bool SubmapList_SubmapEntry::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void SubmapList_SubmapEntry::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& SubmapList_SubmapEntry::pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* SubmapList_SubmapEntry::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  return pose_;
}
::csmlio::transform::proto::Rigid3d* SubmapList_SubmapEntry::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void SubmapList_SubmapEntry::set_allocated_pose(::csmlio::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapList.SubmapEntry.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapList_TrajectorySubmapList::kSubmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}
SubmapList_TrajectorySubmapList::SubmapList_TrajectorySubmapList(const SubmapList_TrajectorySubmapList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      submap_(from.submap_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

void SubmapList_TrajectorySubmapList::SharedCtor() {
  _cached_size_ = 0;
}

SubmapList_TrajectorySubmapList::~SubmapList_TrajectorySubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  SharedDtor();
}

void SubmapList_TrajectorySubmapList::SharedDtor() {
}

void SubmapList_TrajectorySubmapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList_TrajectorySubmapList::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapList_TrajectorySubmapList& SubmapList_TrajectorySubmapList::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapList_TrajectorySubmapList* SubmapList_TrajectorySubmapList::New(::google::protobuf::Arena* arena) const {
  SubmapList_TrajectorySubmapList* n = new SubmapList_TrajectorySubmapList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapList_TrajectorySubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  submap_.Clear();
  _internal_metadata_.Clear();
}

bool SubmapList_TrajectorySubmapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return false;
#undef DO_
}

void SubmapList_TrajectorySubmapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->submap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->submap(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
}

::google::protobuf::uint8* SubmapList_TrajectorySubmapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->submap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->submap(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  return target;
}

size_t SubmapList_TrajectorySubmapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->submap_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submap(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList_TrajectorySubmapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapList_TrajectorySubmapList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapList_TrajectorySubmapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
    MergeFrom(*source);
  }
}

void SubmapList_TrajectorySubmapList::MergeFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  submap_.MergeFrom(from.submap_);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList_TrajectorySubmapList::CopyFrom(const SubmapList_TrajectorySubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList.TrajectorySubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList_TrajectorySubmapList::IsInitialized() const {
  return true;
}

void SubmapList_TrajectorySubmapList::Swap(SubmapList_TrajectorySubmapList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapList_TrajectorySubmapList::InternalSwap(SubmapList_TrajectorySubmapList* other) {
  using std::swap;
  submap_.InternalSwap(&other->submap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapList_TrajectorySubmapList::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapList_TrajectorySubmapList

// repeated .cartographer.mapping.proto.SubmapList.SubmapEntry submap = 1;
int SubmapList_TrajectorySubmapList::submap_size() const {
  return submap_.size();
}
void SubmapList_TrajectorySubmapList::clear_submap() {
  submap_.Clear();
}
const ::csmlio::mapping::proto::SubmapList_SubmapEntry& SubmapList_TrajectorySubmapList::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Get(index);
}
::csmlio::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Mutable(index);
}
::csmlio::mapping::proto::SubmapList_SubmapEntry* SubmapList_TrajectorySubmapList::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SubmapList_SubmapEntry >*
SubmapList_TrajectorySubmapList::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return &submap_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SubmapList_SubmapEntry >&
SubmapList_TrajectorySubmapList::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.TrajectorySubmapList.submap)
  return submap_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapList::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapList::SubmapList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapList)
}
SubmapList::SubmapList(const SubmapList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trajectory_(from.trajectory_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapList)
}

void SubmapList::SharedCtor() {
  _cached_size_ = 0;
}

SubmapList::~SubmapList() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapList)
  SharedDtor();
}

void SubmapList::SharedDtor() {
}

void SubmapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapList::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapList& SubmapList::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapList* SubmapList::New(::google::protobuf::Arena* arena) const {
  SubmapList* n = new SubmapList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapList::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  _internal_metadata_.Clear();
}

bool SubmapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapList)
  return false;
#undef DO_
}

void SubmapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trajectory(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapList)
}

::google::protobuf::uint8* SubmapList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trajectory(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapList)
  return target;
}

size_t SubmapList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapList)
    MergeFrom(*source);
  }
}

void SubmapList::MergeFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
}

void SubmapList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapList::CopyFrom(const SubmapList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapList::IsInitialized() const {
  return true;
}

void SubmapList::Swap(SubmapList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapList::InternalSwap(SubmapList* other) {
  using std::swap;
  trajectory_.InternalSwap(&other->trajectory_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapList::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapList

// repeated .cartographer.mapping.proto.SubmapList.TrajectorySubmapList trajectory = 2;
int SubmapList::trajectory_size() const {
  return trajectory_.size();
}
void SubmapList::clear_trajectory() {
  trajectory_.Clear();
}
const ::csmlio::mapping::proto::SubmapList_TrajectorySubmapList& SubmapList::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Get(index);
}
::csmlio::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Mutable(index);
}
::csmlio::mapping::proto::SubmapList_TrajectorySubmapList* SubmapList::add_trajectory() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SubmapList_TrajectorySubmapList >*
SubmapList::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapList.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SubmapList_TrajectorySubmapList >&
SubmapList::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapList.trajectory)
  return trajectory_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery_Request::kSubmapIndexFieldNumber;
const int SubmapQuery_Request::kTrajectoryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery_Request::SubmapQuery_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Request)
}
SubmapQuery_Request::SubmapQuery_Request(const SubmapQuery_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&submap_index_, &from.submap_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_id_) -
    reinterpret_cast<char*>(&submap_index_)) + sizeof(trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Request)
}

void SubmapQuery_Request::SharedCtor() {
  ::memset(&submap_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&submap_index_)) + sizeof(trajectory_id_));
  _cached_size_ = 0;
}

SubmapQuery_Request::~SubmapQuery_Request() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Request)
  SharedDtor();
}

void SubmapQuery_Request::SharedDtor() {
}

void SubmapQuery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Request::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapQuery_Request& SubmapQuery_Request::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapQuery_Request* SubmapQuery_Request::New(::google::protobuf::Arena* arena) const {
  SubmapQuery_Request* n = new SubmapQuery_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&submap_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_id_) -
      reinterpret_cast<char*>(&submap_index_)) + sizeof(trajectory_id_));
  _internal_metadata_.Clear();
}

bool SubmapQuery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 submap_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trajectory_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery.Request)
  return false;
#undef DO_
}

void SubmapQuery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_index = 1;
  if (this->submap_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->submap_index(), output);
  }

  // int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery.Request)
}

::google::protobuf::uint8* SubmapQuery_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_index = 1;
  if (this->submap_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->submap_index(), target);
  }

  // int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Request)
  return target;
}

size_t SubmapQuery_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Request)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 submap_index = 1;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_index());
  }

  // int32 trajectory_id = 2;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Request)
    MergeFrom(*source);
  }
}

void SubmapQuery_Request::MergeFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.submap_index() != 0) {
    set_submap_index(from.submap_index());
  }
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void SubmapQuery_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Request::CopyFrom(const SubmapQuery_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Request::IsInitialized() const {
  return true;
}

void SubmapQuery_Request::Swap(SubmapQuery_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery_Request::InternalSwap(SubmapQuery_Request* other) {
  using std::swap;
  swap(submap_index_, other->submap_index_);
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery_Request::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapQuery_Request

// int32 submap_index = 1;
void SubmapQuery_Request::clear_submap_index() {
  submap_index_ = 0;
}
::google::protobuf::int32 SubmapQuery_Request::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
  return submap_index_;
}
void SubmapQuery_Request::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.submap_index)
}

// int32 trajectory_id = 2;
void SubmapQuery_Request::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 SubmapQuery_Request::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
  return trajectory_id_;
}
void SubmapQuery_Request::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Request.trajectory_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery_Response_SubmapTexture::kCellsFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kWidthFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kHeightFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kResolutionFieldNumber;
const int SubmapQuery_Response_SubmapTexture::kSlicePoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}
SubmapQuery_Response_SubmapTexture::SubmapQuery_Response_SubmapTexture(const SubmapQuery_Response_SubmapTexture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cells_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cells().size() > 0) {
    cells_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cells_);
  }
  if (from.has_slice_pose()) {
    slice_pose_ = new ::csmlio::transform::proto::Rigid3d(*from.slice_pose_);
  } else {
    slice_pose_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolution_) -
    reinterpret_cast<char*>(&width_)) + sizeof(resolution_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

void SubmapQuery_Response_SubmapTexture::SharedCtor() {
  cells_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&slice_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&slice_pose_)) + sizeof(resolution_));
  _cached_size_ = 0;
}

SubmapQuery_Response_SubmapTexture::~SubmapQuery_Response_SubmapTexture() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  SharedDtor();
}

void SubmapQuery_Response_SubmapTexture::SharedDtor() {
  cells_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete slice_pose_;
}

void SubmapQuery_Response_SubmapTexture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Response_SubmapTexture::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapQuery_Response_SubmapTexture& SubmapQuery_Response_SubmapTexture::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapQuery_Response_SubmapTexture* SubmapQuery_Response_SubmapTexture::New(::google::protobuf::Arena* arena) const {
  SubmapQuery_Response_SubmapTexture* n = new SubmapQuery_Response_SubmapTexture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery_Response_SubmapTexture::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && slice_pose_ != NULL) {
    delete slice_pose_;
  }
  slice_pose_ = NULL;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&width_)) + sizeof(resolution_));
  _internal_metadata_.Clear();
}

bool SubmapQuery_Response_SubmapTexture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes cells = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cells()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double resolution = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d slice_pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slice_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return false;
#undef DO_
}

void SubmapQuery_Response_SubmapTexture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cells = 1;
  if (this->cells().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->cells(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // double resolution = 4;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->resolution(), output);
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->slice_pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
}

::google::protobuf::uint8* SubmapQuery_Response_SubmapTexture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes cells = 1;
  if (this->cells().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->cells(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // double resolution = 4;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->resolution(), target);
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->slice_pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  return target;
}

size_t SubmapQuery_Response_SubmapTexture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes cells = 1;
  if (this->cells().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cells());
  }

  // .cartographer.transform.proto.Rigid3d slice_pose = 5;
  if (this->has_slice_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slice_pose_);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // double resolution = 4;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Response_SubmapTexture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery_Response_SubmapTexture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery_Response_SubmapTexture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
    MergeFrom(*source);
  }
}

void SubmapQuery_Response_SubmapTexture::MergeFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cells().size() > 0) {

    cells_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cells_);
  }
  if (from.has_slice_pose()) {
    mutable_slice_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.slice_pose());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response_SubmapTexture::CopyFrom(const SubmapQuery_Response_SubmapTexture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response_SubmapTexture::IsInitialized() const {
  return true;
}

void SubmapQuery_Response_SubmapTexture::Swap(SubmapQuery_Response_SubmapTexture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery_Response_SubmapTexture::InternalSwap(SubmapQuery_Response_SubmapTexture* other) {
  using std::swap;
  cells_.Swap(&other->cells_);
  swap(slice_pose_, other->slice_pose_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(resolution_, other->resolution_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery_Response_SubmapTexture::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapQuery_Response_SubmapTexture

// bytes cells = 1;
void SubmapQuery_Response_SubmapTexture::clear_cells() {
  cells_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmapQuery_Response_SubmapTexture::cells() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return cells_.GetNoArena();
}
void SubmapQuery_Response_SubmapTexture::set_cells(const ::std::string& value) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
#if LANG_CXX11
void SubmapQuery_Response_SubmapTexture::set_cells(::std::string&& value) {
  
  cells_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
#endif
void SubmapQuery_Response_SubmapTexture::set_cells(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
void SubmapQuery_Response_SubmapTexture::set_cells(const void* value, size_t size) {
  
  cells_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}
::std::string* SubmapQuery_Response_SubmapTexture::mutable_cells() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  return cells_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmapQuery_Response_SubmapTexture::release_cells() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
  
  return cells_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmapQuery_Response_SubmapTexture::set_allocated_cells(::std::string* cells) {
  if (cells != NULL) {
    
  } else {
    
  }
  cells_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cells);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.cells)
}

// int32 width = 2;
void SubmapQuery_Response_SubmapTexture::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::width() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
  return width_;
}
void SubmapQuery_Response_SubmapTexture::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.width)
}

// int32 height = 3;
void SubmapQuery_Response_SubmapTexture::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 SubmapQuery_Response_SubmapTexture::height() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
  return height_;
}
void SubmapQuery_Response_SubmapTexture::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.height)
}

// double resolution = 4;
void SubmapQuery_Response_SubmapTexture::clear_resolution() {
  resolution_ = 0;
}
double SubmapQuery_Response_SubmapTexture::resolution() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
  return resolution_;
}
void SubmapQuery_Response_SubmapTexture::set_resolution(double value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.resolution)
}

// .cartographer.transform.proto.Rigid3d slice_pose = 5;
bool SubmapQuery_Response_SubmapTexture::has_slice_pose() const {
  return this != internal_default_instance() && slice_pose_ != NULL;
}
void SubmapQuery_Response_SubmapTexture::clear_slice_pose() {
  if (GetArenaNoVirtual() == NULL && slice_pose_ != NULL) delete slice_pose_;
  slice_pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& SubmapQuery_Response_SubmapTexture::slice_pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = slice_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::mutable_slice_pose() {
  
  if (slice_pose_ == NULL) {
    slice_pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  return slice_pose_;
}
::csmlio::transform::proto::Rigid3d* SubmapQuery_Response_SubmapTexture::release_slice_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = slice_pose_;
  slice_pose_ = NULL;
  return temp;
}
void SubmapQuery_Response_SubmapTexture::set_allocated_slice_pose(::csmlio::transform::proto::Rigid3d* slice_pose) {
  delete slice_pose_;
  slice_pose_ = slice_pose;
  if (slice_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture.slice_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery_Response::kSubmapVersionFieldNumber;
const int SubmapQuery_Response::kTexturesFieldNumber;
const int SubmapQuery_Response::kErrorMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery_Response::SubmapQuery_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery.Response)
}
SubmapQuery_Response::SubmapQuery_Response(const SubmapQuery_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      textures_(from.textures_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  submap_version_ = from.submap_version_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery.Response)
}

void SubmapQuery_Response::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submap_version_ = 0;
  _cached_size_ = 0;
}

SubmapQuery_Response::~SubmapQuery_Response() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery.Response)
  SharedDtor();
}

void SubmapQuery_Response::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SubmapQuery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery_Response::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapQuery_Response& SubmapQuery_Response::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapQuery_Response* SubmapQuery_Response::New(::google::protobuf::Arena* arena) const {
  SubmapQuery_Response* n = new SubmapQuery_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  textures_.Clear();
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submap_version_ = 0;
  _internal_metadata_.Clear();
}

bool SubmapQuery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 submap_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.SubmapQuery.Response.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_textures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery.Response)
  return false;
#undef DO_
}

void SubmapQuery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_version(), output);
  }

  // string error_message = 8;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SubmapQuery.Response.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->error_message(), output);
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->textures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->textures(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery.Response)
}

::google::protobuf::uint8* SubmapQuery_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_version(), target);
  }

  // string error_message = 8;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SubmapQuery.Response.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->error_message(), target);
  }

  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->textures_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->textures(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery.Response)
  return target;
}

size_t SubmapQuery_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery.Response)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->textures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textures(static_cast<int>(i)));
    }
  }

  // string error_message = 8;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // int32 submap_version = 2;
  if (this->submap_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery.Response)
    MergeFrom(*source);
  }
}

void SubmapQuery_Response::MergeFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  textures_.MergeFrom(from.textures_);
  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.submap_version() != 0) {
    set_submap_version(from.submap_version());
  }
}

void SubmapQuery_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery_Response::CopyFrom(const SubmapQuery_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery_Response::IsInitialized() const {
  return true;
}

void SubmapQuery_Response::Swap(SubmapQuery_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery_Response::InternalSwap(SubmapQuery_Response* other) {
  using std::swap;
  textures_.InternalSwap(&other->textures_);
  error_message_.Swap(&other->error_message_);
  swap(submap_version_, other->submap_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery_Response::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapQuery_Response

// int32 submap_version = 2;
void SubmapQuery_Response::clear_submap_version() {
  submap_version_ = 0;
}
::google::protobuf::int32 SubmapQuery_Response::submap_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
  return submap_version_;
}
void SubmapQuery_Response::set_submap_version(::google::protobuf::int32 value) {
  
  submap_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.submap_version)
}

// repeated .cartographer.mapping.proto.SubmapQuery.Response.SubmapTexture textures = 10;
int SubmapQuery_Response::textures_size() const {
  return textures_.size();
}
void SubmapQuery_Response::clear_textures() {
  textures_.Clear();
}
const ::csmlio::mapping::proto::SubmapQuery_Response_SubmapTexture& SubmapQuery_Response::textures(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Get(index);
}
::csmlio::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::mutable_textures(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Mutable(index);
}
::csmlio::mapping::proto::SubmapQuery_Response_SubmapTexture* SubmapQuery_Response::add_textures() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SubmapQuery_Response_SubmapTexture >*
SubmapQuery_Response::mutable_textures() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return &textures_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SubmapQuery_Response_SubmapTexture >&
SubmapQuery_Response::textures() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.SubmapQuery.Response.textures)
  return textures_;
}

// string error_message = 8;
void SubmapQuery_Response::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SubmapQuery_Response::error_message() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return error_message_.GetNoArena();
}
void SubmapQuery_Response::set_error_message(const ::std::string& value) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
#if LANG_CXX11
void SubmapQuery_Response::set_error_message(::std::string&& value) {
  
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
#endif
void SubmapQuery_Response::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
void SubmapQuery_Response::set_error_message(const char* value, size_t size) {
  
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}
::std::string* SubmapQuery_Response::mutable_error_message() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SubmapQuery_Response::release_error_message() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.Response.error_message)
  
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SubmapQuery_Response::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    
  } else {
    
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.Response.error_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapQuery::kRequestFieldNumber;
const int SubmapQuery::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapQuery::SubmapQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapQuery)
}
SubmapQuery::SubmapQuery(const SubmapQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request()) {
    request_ = new ::csmlio::mapping::proto::SubmapQuery_Request(*from.request_);
  } else {
    request_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::csmlio::mapping::proto::SubmapQuery_Response(*from.response_);
  } else {
    response_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapQuery)
}

void SubmapQuery::SharedCtor() {
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&request_)) + sizeof(response_));
  _cached_size_ = 0;
}

SubmapQuery::~SubmapQuery() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapQuery)
  SharedDtor();
}

void SubmapQuery::SharedDtor() {
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
}

void SubmapQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapQuery::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapQuery& SubmapQuery::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapQuery* SubmapQuery::New(::google::protobuf::Arena* arena) const {
  SubmapQuery* n = new SubmapQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
  _internal_metadata_.Clear();
}

bool SubmapQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapQuery)
  return false;
#undef DO_
}

void SubmapQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->request_, output);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapQuery)
}

::google::protobuf::uint8* SubmapQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->request_, deterministic, target);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapQuery)
  return target;
}

size_t SubmapQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.SubmapQuery.Request request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->request_);
  }

  // .cartographer.mapping.proto.SubmapQuery.Response response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapQuery)
    MergeFrom(*source);
  }
}

void SubmapQuery::MergeFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    mutable_request()->::csmlio::mapping::proto::SubmapQuery_Request::MergeFrom(from.request());
  }
  if (from.has_response()) {
    mutable_response()->::csmlio::mapping::proto::SubmapQuery_Response::MergeFrom(from.response());
  }
}

void SubmapQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapQuery::CopyFrom(const SubmapQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapQuery::IsInitialized() const {
  return true;
}

void SubmapQuery::Swap(SubmapQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapQuery::InternalSwap(SubmapQuery* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapQuery::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fsubmap_5fvisualization_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapQuery

// .cartographer.mapping.proto.SubmapQuery.Request request = 1;
bool SubmapQuery::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
void SubmapQuery::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) delete request_;
  request_ = NULL;
}
const ::csmlio::mapping::proto::SubmapQuery_Request& SubmapQuery::request() const {
  const ::csmlio::mapping::proto::SubmapQuery_Request* p = request_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.request)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::SubmapQuery_Request*>(
      &::csmlio::mapping::proto::_SubmapQuery_Request_default_instance_);
}
::csmlio::mapping::proto::SubmapQuery_Request* SubmapQuery::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::csmlio::mapping::proto::SubmapQuery_Request;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.request)
  return request_;
}
::csmlio::mapping::proto::SubmapQuery_Request* SubmapQuery::release_request() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.request)
  
  ::csmlio::mapping::proto::SubmapQuery_Request* temp = request_;
  request_ = NULL;
  return temp;
}
void SubmapQuery::set_allocated_request(::csmlio::mapping::proto::SubmapQuery_Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.request)
}

// .cartographer.mapping.proto.SubmapQuery.Response response = 2;
bool SubmapQuery::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void SubmapQuery::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::csmlio::mapping::proto::SubmapQuery_Response& SubmapQuery::response() const {
  const ::csmlio::mapping::proto::SubmapQuery_Response* p = response_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapQuery.response)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::SubmapQuery_Response*>(
      &::csmlio::mapping::proto::_SubmapQuery_Response_default_instance_);
}
::csmlio::mapping::proto::SubmapQuery_Response* SubmapQuery::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::csmlio::mapping::proto::SubmapQuery_Response;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SubmapQuery.response)
  return response_;
}
::csmlio::mapping::proto::SubmapQuery_Response* SubmapQuery::release_response() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SubmapQuery.response)
  
  ::csmlio::mapping::proto::SubmapQuery_Response* temp = response_;
  response_ = NULL;
  return temp;
}
void SubmapQuery::set_allocated_response(::csmlio::mapping::proto::SubmapQuery_Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SubmapQuery.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)
