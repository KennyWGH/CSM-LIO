// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/tsdf_2d.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace csmlio {
namespace mapping {
namespace proto {
class TSDF2D;
class TSDF2DDefaultTypeInternal;
extern TSDF2DDefaultTypeInternal _TSDF2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

namespace csmlio {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto

// ===================================================================

class TSDF2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TSDF2D) */ {
 public:
  TSDF2D();
  virtual ~TSDF2D();

  TSDF2D(const TSDF2D& from);

  inline TSDF2D& operator=(const TSDF2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TSDF2D(TSDF2D&& from) noexcept
    : TSDF2D() {
    *this = ::std::move(from);
  }

  inline TSDF2D& operator=(TSDF2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TSDF2D& default_instance();

  static inline const TSDF2D* internal_default_instance() {
    return reinterpret_cast<const TSDF2D*>(
               &_TSDF2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TSDF2D* other);
  friend void swap(TSDF2D& a, TSDF2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TSDF2D* New() const PROTOBUF_FINAL { return New(NULL); }

  TSDF2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TSDF2D& from);
  void MergeFrom(const TSDF2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TSDF2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 weight_cells = 3;
  int weight_cells_size() const;
  void clear_weight_cells();
  static const int kWeightCellsFieldNumber = 3;
  ::google::protobuf::int32 weight_cells(int index) const;
  void set_weight_cells(int index, ::google::protobuf::int32 value);
  void add_weight_cells(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weight_cells() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weight_cells();

  // float truncation_distance = 1;
  void clear_truncation_distance();
  static const int kTruncationDistanceFieldNumber = 1;
  float truncation_distance() const;
  void set_truncation_distance(float value);

  // float max_weight = 2;
  void clear_max_weight();
  static const int kMaxWeightFieldNumber = 2;
  float max_weight() const;
  void set_max_weight(float value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TSDF2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weight_cells_;
  mutable int _weight_cells_cached_byte_size_;
  float truncation_distance_;
  float max_weight_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TSDF2D

// float truncation_distance = 1;
inline void TSDF2D::clear_truncation_distance() {
  truncation_distance_ = 0;
}
inline float TSDF2D::truncation_distance() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.truncation_distance)
  return truncation_distance_;
}
inline void TSDF2D::set_truncation_distance(float value) {
  
  truncation_distance_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.truncation_distance)
}

// float max_weight = 2;
inline void TSDF2D::clear_max_weight() {
  max_weight_ = 0;
}
inline float TSDF2D::max_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.max_weight)
  return max_weight_;
}
inline void TSDF2D::set_max_weight(float value) {
  
  max_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.max_weight)
}

// repeated int32 weight_cells = 3;
inline int TSDF2D::weight_cells_size() const {
  return weight_cells_.size();
}
inline void TSDF2D::clear_weight_cells() {
  weight_cells_.Clear();
}
inline ::google::protobuf::int32 TSDF2D::weight_cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TSDF2D.weight_cells)
  return weight_cells_.Get(index);
}
inline void TSDF2D::set_weight_cells(int index, ::google::protobuf::int32 value) {
  weight_cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TSDF2D.weight_cells)
}
inline void TSDF2D::add_weight_cells(::google::protobuf::int32 value) {
  weight_cells_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TSDF2D.weight_cells)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TSDF2D::weight_cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TSDF2D.weight_cells)
  return weight_cells_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TSDF2D::mutable_weight_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TSDF2D.weight_cells)
  return &weight_cells_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2ftsdf_5f2d_2eproto__INCLUDED
