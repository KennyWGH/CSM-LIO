// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmlio/lio/proto/pose_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmlio {
namespace mapping {
namespace proto {
class SubmapIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SubmapId>
     _instance;
} _SubmapId_default_instance_;
class NodeIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeId>
     _instance;
} _NodeId_default_instance_;
class PoseGraph_ConstraintDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PoseGraph_Constraint>
     _instance;
} _PoseGraph_Constraint_default_instance_;
class PoseGraph_LandmarkPoseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PoseGraph_LandmarkPose>
     _instance;
} _PoseGraph_LandmarkPose_default_instance_;
class PoseGraphDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PoseGraph>
     _instance;
} _PoseGraph_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapId, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmapId, submap_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeId, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeId, node_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, submap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, relative_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, rotation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_Constraint, tag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_LandmarkPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_LandmarkPose, landmark_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph_LandmarkPose, global_pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph, constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph, trajectory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoseGraph, landmark_poses_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(SubmapId)},
  { 7, -1, sizeof(NodeId)},
  { 14, -1, sizeof(PoseGraph_Constraint)},
  { 25, -1, sizeof(PoseGraph_LandmarkPose)},
  { 32, -1, sizeof(PoseGraph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SubmapId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoseGraph_Constraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoseGraph_LandmarkPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PoseGraph_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/pose_graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _SubmapId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SubmapId_default_instance_);_NodeId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeId_default_instance_);_PoseGraph_Constraint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PoseGraph_Constraint_default_instance_);_PoseGraph_LandmarkPose_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PoseGraph_LandmarkPose_default_instance_);_PoseGraph_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PoseGraph_default_instance_);_PoseGraph_Constraint_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::csmlio::mapping::proto::SubmapId*>(
      ::csmlio::mapping::proto::SubmapId::internal_default_instance());
  _PoseGraph_Constraint_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::csmlio::mapping::proto::NodeId*>(
      ::csmlio::mapping::proto::NodeId::internal_default_instance());
  _PoseGraph_Constraint_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _PoseGraph_LandmarkPose_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+cartographer/mapping/proto/pose_graph."
      "proto\022\032cartographer.mapping.proto\032+carto"
      "grapher/mapping/proto/trajectory.proto\032,"
      "cartographer/transform/proto/transform.p"
      "roto\"7\n\010SubmapId\022\025\n\rtrajectory_id\030\001 \001(\005\022"
      "\024\n\014submap_index\030\002 \001(\005\"3\n\006NodeId\022\025\n\rtraje"
      "ctory_id\030\001 \001(\005\022\022\n\nnode_index\030\002 \001(\005\"\230\005\n\tP"
      "oseGraph\022D\n\nconstraint\030\002 \003(\01320.cartograp"
      "her.mapping.proto.PoseGraph.Constraint\022:"
      "\n\ntrajectory\030\004 \003(\0132&.cartographer.mappin"
      "g.proto.Trajectory\022J\n\016landmark_poses\030\005 \003"
      "(\01322.cartographer.mapping.proto.PoseGrap"
      "h.LandmarkPose\032\333\002\n\nConstraint\0227\n\tsubmap_"
      "id\030\001 \001(\0132$.cartographer.mapping.proto.Su"
      "bmapId\0223\n\007node_id\030\002 \001(\0132\".cartographer.m"
      "apping.proto.NodeId\022<\n\rrelative_pose\030\003 \001"
      "(\0132%.cartographer.transform.proto.Rigid3"
      "d\022\032\n\022translation_weight\030\006 \001(\001\022\027\n\017rotatio"
      "n_weight\030\007 \001(\001\022A\n\003tag\030\005 \001(\01624.cartograph"
      "er.mapping.proto.PoseGraph.Constraint.Ta"
      "g\")\n\003Tag\022\020\n\014INTRA_SUBMAP\020\000\022\020\n\014INTER_SUBM"
      "AP\020\001\032_\n\014LandmarkPose\022\023\n\013landmark_id\030\001 \001("
      "\t\022:\n\013global_pose\030\002 \001(\0132%.cartographer.tr"
      "ansform.proto.Rigid3db\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/pose_graph.proto", &protobuf_RegisterTypes);
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::AddDescriptors();
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto

const ::google::protobuf::EnumDescriptor* PoseGraph_Constraint_Tag_descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_enum_descriptors[0];
}
bool PoseGraph_Constraint_Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoseGraph_Constraint_Tag PoseGraph_Constraint::INTRA_SUBMAP;
const PoseGraph_Constraint_Tag PoseGraph_Constraint::INTER_SUBMAP;
const PoseGraph_Constraint_Tag PoseGraph_Constraint::Tag_MIN;
const PoseGraph_Constraint_Tag PoseGraph_Constraint::Tag_MAX;
const int PoseGraph_Constraint::Tag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapId::kTrajectoryIdFieldNumber;
const int SubmapId::kSubmapIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapId::SubmapId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapId)
}
SubmapId::SubmapId(const SubmapId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&submap_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapId)
}

void SubmapId::SharedCtor() {
  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  _cached_size_ = 0;
}

SubmapId::~SubmapId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapId)
  SharedDtor();
}

void SubmapId::SharedDtor() {
}

void SubmapId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmapId::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SubmapId& SubmapId::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

SubmapId* SubmapId::New(::google::protobuf::Arena* arena) const {
  SubmapId* n = new SubmapId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubmapId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  _internal_metadata_.Clear();
}

bool SubmapId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 submap_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapId)
  return false;
#undef DO_
}

void SubmapId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapId)
}

::google::protobuf::uint8* SubmapId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapId)
  return target;
}

size_t SubmapId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmapId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapId)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SubmapId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapId)
    MergeFrom(*source);
  }
}

void SubmapId::MergeFrom(const SubmapId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.submap_index() != 0) {
    set_submap_index(from.submap_index());
  }
}

void SubmapId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapId::CopyFrom(const SubmapId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapId::IsInitialized() const {
  return true;
}

void SubmapId::Swap(SubmapId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapId::InternalSwap(SubmapId* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  swap(submap_index_, other->submap_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SubmapId::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubmapId

// int32 trajectory_id = 1;
void SubmapId::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 SubmapId::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapId.trajectory_id)
  return trajectory_id_;
}
void SubmapId::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapId.trajectory_id)
}

// int32 submap_index = 2;
void SubmapId::clear_submap_index() {
  submap_index_ = 0;
}
::google::protobuf::int32 SubmapId::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SubmapId.submap_index)
  return submap_index_;
}
void SubmapId::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SubmapId.submap_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeId::kTrajectoryIdFieldNumber;
const int NodeId::kNodeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeId::NodeId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.NodeId)
}
NodeId::NodeId(const NodeId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.NodeId)
}

void NodeId::SharedCtor() {
  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  _cached_size_ = 0;
}

NodeId::~NodeId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.NodeId)
  SharedDtor();
}

void NodeId::SharedDtor() {
}

void NodeId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeId::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeId& NodeId::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeId* NodeId::New(::google::protobuf::Arena* arena) const {
  NodeId* n = new NodeId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.NodeId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  _internal_metadata_.Clear();
}

bool NodeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.NodeId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.NodeId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.NodeId)
  return false;
#undef DO_
}

void NodeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.NodeId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.NodeId)
}

::google::protobuf::uint8* NodeId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.NodeId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.NodeId)
  return target;
}

size_t NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.NodeId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.NodeId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.NodeId)
    MergeFrom(*source);
  }
}

void NodeId::MergeFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
}

void NodeId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeId::CopyFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeId::IsInitialized() const {
  return true;
}

void NodeId::Swap(NodeId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeId::InternalSwap(NodeId* other) {
  using std::swap;
  swap(trajectory_id_, other->trajectory_id_);
  swap(node_index_, other->node_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeId::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeId

// int32 trajectory_id = 1;
void NodeId::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 NodeId::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NodeId.trajectory_id)
  return trajectory_id_;
}
void NodeId::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NodeId.trajectory_id)
}

// int32 node_index = 2;
void NodeId::clear_node_index() {
  node_index_ = 0;
}
::google::protobuf::int32 NodeId::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.NodeId.node_index)
  return node_index_;
}
void NodeId::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.NodeId.node_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraph_Constraint::kSubmapIdFieldNumber;
const int PoseGraph_Constraint::kNodeIdFieldNumber;
const int PoseGraph_Constraint::kRelativePoseFieldNumber;
const int PoseGraph_Constraint::kTranslationWeightFieldNumber;
const int PoseGraph_Constraint::kRotationWeightFieldNumber;
const int PoseGraph_Constraint::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraph_Constraint::PoseGraph_Constraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraph.Constraint)
}
PoseGraph_Constraint::PoseGraph_Constraint(const PoseGraph_Constraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::csmlio::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = NULL;
  }
  if (from.has_node_id()) {
    node_id_ = new ::csmlio::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = NULL;
  }
  if (from.has_relative_pose()) {
    relative_pose_ = new ::csmlio::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = NULL;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph.Constraint)
}

void PoseGraph_Constraint::SharedCtor() {
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(tag_));
  _cached_size_ = 0;
}

PoseGraph_Constraint::~PoseGraph_Constraint() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph.Constraint)
  SharedDtor();
}

void PoseGraph_Constraint::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete relative_pose_;
}

void PoseGraph_Constraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseGraph_Constraint::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseGraph_Constraint& PoseGraph_Constraint::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoseGraph_Constraint* PoseGraph_Constraint::New(::google::protobuf::Arena* arena) const {
  PoseGraph_Constraint* n = new PoseGraph_Constraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseGraph_Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) {
    delete submap_id_;
  }
  submap_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) {
    delete node_id_;
  }
  node_id_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) {
    delete relative_pose_;
  }
  relative_pose_ = NULL;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(tag_));
  _internal_metadata_.Clear();
}

bool PoseGraph_Constraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraph.Constraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.NodeId node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d relative_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tag(static_cast< ::csmlio::mapping::proto::PoseGraph_Constraint_Tag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double translation_weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraph.Constraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraph.Constraint)
  return false;
#undef DO_
}

void PoseGraph_Constraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->submap_id_, output);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_id_, output);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->relative_pose_, output);
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tag(), output);
  }

  // double translation_weight = 6;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->translation_weight(), output);
  }

  // double rotation_weight = 7;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rotation_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraph.Constraint)
}

::google::protobuf::uint8* PoseGraph_Constraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->submap_id_, deterministic, target);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_id_, deterministic, target);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->relative_pose_, deterministic, target);
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tag(), target);
  }

  // double translation_weight = 6;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->translation_weight(), target);
  }

  // double rotation_weight = 7;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rotation_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph.Constraint)
  return target;
}

size_t PoseGraph_Constraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph.Constraint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submap_id_);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_id_);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relative_pose_);
  }

  // double translation_weight = 6;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 7;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseGraph_Constraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraph_Constraint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseGraph_Constraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraph.Constraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraph.Constraint)
    MergeFrom(*source);
  }
}

void PoseGraph_Constraint::MergeFrom(const PoseGraph_Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::csmlio::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_node_id()) {
    mutable_node_id()->::csmlio::mapping::proto::NodeId::MergeFrom(from.node_id());
  }
  if (from.has_relative_pose()) {
    mutable_relative_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
  if (from.tag() != 0) {
    set_tag(from.tag());
  }
}

void PoseGraph_Constraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraph_Constraint::CopyFrom(const PoseGraph_Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph_Constraint::IsInitialized() const {
  return true;
}

void PoseGraph_Constraint::Swap(PoseGraph_Constraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraph_Constraint::InternalSwap(PoseGraph_Constraint* other) {
  using std::swap;
  swap(submap_id_, other->submap_id_);
  swap(node_id_, other->node_id_);
  swap(relative_pose_, other->relative_pose_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  swap(tag_, other->tag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseGraph_Constraint::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseGraph_Constraint

// .cartographer.mapping.proto.SubmapId submap_id = 1;
bool PoseGraph_Constraint::has_submap_id() const {
  return this != internal_default_instance() && submap_id_ != NULL;
}
void PoseGraph_Constraint::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
const ::csmlio::mapping::proto::SubmapId& PoseGraph_Constraint::submap_id() const {
  const ::csmlio::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::SubmapId*>(
      &::csmlio::mapping::proto::_SubmapId_default_instance_);
}
::csmlio::mapping::proto::SubmapId* PoseGraph_Constraint::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::csmlio::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  return submap_id_;
}
::csmlio::mapping::proto::SubmapId* PoseGraph_Constraint::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
  
  ::csmlio::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
void PoseGraph_Constraint::set_allocated_submap_id(::csmlio::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.submap_id)
}

// .cartographer.mapping.proto.NodeId node_id = 2;
bool PoseGraph_Constraint::has_node_id() const {
  return this != internal_default_instance() && node_id_ != NULL;
}
void PoseGraph_Constraint::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
}
const ::csmlio::mapping::proto::NodeId& PoseGraph_Constraint::node_id() const {
  const ::csmlio::mapping::proto::NodeId* p = node_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::NodeId*>(
      &::csmlio::mapping::proto::_NodeId_default_instance_);
}
::csmlio::mapping::proto::NodeId* PoseGraph_Constraint::mutable_node_id() {
  
  if (node_id_ == NULL) {
    node_id_ = new ::csmlio::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  return node_id_;
}
::csmlio::mapping::proto::NodeId* PoseGraph_Constraint::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
  
  ::csmlio::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
void PoseGraph_Constraint::set_allocated_node_id(::csmlio::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.node_id)
}

// .cartographer.transform.proto.Rigid3d relative_pose = 3;
bool PoseGraph_Constraint::has_relative_pose() const {
  return this != internal_default_instance() && relative_pose_ != NULL;
}
void PoseGraph_Constraint::clear_relative_pose() {
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& PoseGraph_Constraint::relative_pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = relative_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* PoseGraph_Constraint::mutable_relative_pose() {
  
  if (relative_pose_ == NULL) {
    relative_pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  return relative_pose_;
}
::csmlio::transform::proto::Rigid3d* PoseGraph_Constraint::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = NULL;
  return temp;
}
void PoseGraph_Constraint::set_allocated_relative_pose(::csmlio::transform::proto::Rigid3d* relative_pose) {
  delete relative_pose_;
  relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.Constraint.relative_pose)
}

// double translation_weight = 6;
void PoseGraph_Constraint::clear_translation_weight() {
  translation_weight_ = 0;
}
double PoseGraph_Constraint::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.translation_weight)
  return translation_weight_;
}
void PoseGraph_Constraint::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.translation_weight)
}

// double rotation_weight = 7;
void PoseGraph_Constraint::clear_rotation_weight() {
  rotation_weight_ = 0;
}
double PoseGraph_Constraint::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.rotation_weight)
  return rotation_weight_;
}
void PoseGraph_Constraint::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.rotation_weight)
}

// .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
void PoseGraph_Constraint::clear_tag() {
  tag_ = 0;
}
::csmlio::mapping::proto::PoseGraph_Constraint_Tag PoseGraph_Constraint::tag() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.Constraint.tag)
  return static_cast< ::csmlio::mapping::proto::PoseGraph_Constraint_Tag >(tag_);
}
void PoseGraph_Constraint::set_tag(::csmlio::mapping::proto::PoseGraph_Constraint_Tag value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.Constraint.tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraph_LandmarkPose::kLandmarkIdFieldNumber;
const int PoseGraph_LandmarkPose::kGlobalPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraph_LandmarkPose::PoseGraph_LandmarkPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}
PoseGraph_LandmarkPose::PoseGraph_LandmarkPose(const PoseGraph_LandmarkPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landmark_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.landmark_id().size() > 0) {
    landmark_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landmark_id_);
  }
  if (from.has_global_pose()) {
    global_pose_ = new ::csmlio::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}

void PoseGraph_LandmarkPose::SharedCtor() {
  landmark_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_pose_ = NULL;
  _cached_size_ = 0;
}

PoseGraph_LandmarkPose::~PoseGraph_LandmarkPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  SharedDtor();
}

void PoseGraph_LandmarkPose::SharedDtor() {
  landmark_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete global_pose_;
}

void PoseGraph_LandmarkPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseGraph_LandmarkPose::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseGraph_LandmarkPose& PoseGraph_LandmarkPose::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoseGraph_LandmarkPose* PoseGraph_LandmarkPose::New(::google::protobuf::Arena* arena) const {
  PoseGraph_LandmarkPose* n = new PoseGraph_LandmarkPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseGraph_LandmarkPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) {
    delete global_pose_;
  }
  global_pose_ = NULL;
  _internal_metadata_.Clear();
}

bool PoseGraph_LandmarkPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string landmark_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landmark_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d global_pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_global_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return false;
#undef DO_
}

void PoseGraph_LandmarkPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->landmark_id(), output);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->global_pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}

::google::protobuf::uint8* PoseGraph_LandmarkPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->landmark_id(), target);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->global_pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return target;
}

size_t PoseGraph_LandmarkPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->landmark_id());
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->global_pose_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseGraph_LandmarkPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraph_LandmarkPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseGraph_LandmarkPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraph.LandmarkPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraph.LandmarkPose)
    MergeFrom(*source);
  }
}

void PoseGraph_LandmarkPose::MergeFrom(const PoseGraph_LandmarkPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landmark_id().size() > 0) {

    landmark_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landmark_id_);
  }
  if (from.has_global_pose()) {
    mutable_global_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.global_pose());
  }
}

void PoseGraph_LandmarkPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraph_LandmarkPose::CopyFrom(const PoseGraph_LandmarkPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph_LandmarkPose::IsInitialized() const {
  return true;
}

void PoseGraph_LandmarkPose::Swap(PoseGraph_LandmarkPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraph_LandmarkPose::InternalSwap(PoseGraph_LandmarkPose* other) {
  using std::swap;
  landmark_id_.Swap(&other->landmark_id_);
  swap(global_pose_, other->global_pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseGraph_LandmarkPose::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseGraph_LandmarkPose

// string landmark_id = 1;
void PoseGraph_LandmarkPose::clear_landmark_id() {
  landmark_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PoseGraph_LandmarkPose::landmark_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return landmark_id_.GetNoArena();
}
void PoseGraph_LandmarkPose::set_landmark_id(const ::std::string& value) {
  
  landmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
#if LANG_CXX11
void PoseGraph_LandmarkPose::set_landmark_id(::std::string&& value) {
  
  landmark_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
#endif
void PoseGraph_LandmarkPose::set_landmark_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  landmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
void PoseGraph_LandmarkPose::set_landmark_id(const char* value, size_t size) {
  
  landmark_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}
::std::string* PoseGraph_LandmarkPose::mutable_landmark_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  return landmark_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PoseGraph_LandmarkPose::release_landmark_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
  
  return landmark_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PoseGraph_LandmarkPose::set_allocated_landmark_id(::std::string* landmark_id) {
  if (landmark_id != NULL) {
    
  } else {
    
  }
  landmark_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), landmark_id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id)
}

// .cartographer.transform.proto.Rigid3d global_pose = 2;
bool PoseGraph_LandmarkPose::has_global_pose() const {
  return this != internal_default_instance() && global_pose_ != NULL;
}
void PoseGraph_LandmarkPose::clear_global_pose() {
  if (GetArenaNoVirtual() == NULL && global_pose_ != NULL) delete global_pose_;
  global_pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& PoseGraph_LandmarkPose::global_pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = global_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* PoseGraph_LandmarkPose::mutable_global_pose() {
  
  if (global_pose_ == NULL) {
    global_pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  return global_pose_;
}
::csmlio::transform::proto::Rigid3d* PoseGraph_LandmarkPose::release_global_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = global_pose_;
  global_pose_ = NULL;
  return temp;
}
void PoseGraph_LandmarkPose::set_allocated_global_pose(::csmlio::transform::proto::Rigid3d* global_pose) {
  delete global_pose_;
  global_pose_ = global_pose;
  if (global_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.PoseGraph.LandmarkPose.global_pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraph::kConstraintFieldNumber;
const int PoseGraph::kTrajectoryFieldNumber;
const int PoseGraph::kLandmarkPosesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraph::PoseGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraph)
}
PoseGraph::PoseGraph(const PoseGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      constraint_(from.constraint_),
      trajectory_(from.trajectory_),
      landmark_poses_(from.landmark_poses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph)
}

void PoseGraph::SharedCtor() {
  _cached_size_ = 0;
}

PoseGraph::~PoseGraph() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph)
  SharedDtor();
}

void PoseGraph::SharedDtor() {
}

void PoseGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoseGraph::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PoseGraph& PoseGraph::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

PoseGraph* PoseGraph::New(::google::protobuf::Arena* arena) const {
  PoseGraph* n = new PoseGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PoseGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraint_.Clear();
  trajectory_.Clear();
  landmark_poses_.Clear();
  _internal_metadata_.Clear();
}

bool PoseGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_poses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraph)
  return false;
#undef DO_
}

void PoseGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->constraint(static_cast<int>(i)), output);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trajectory(static_cast<int>(i)), output);
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_poses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->landmark_poses(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraph)
}

::google::protobuf::uint8* PoseGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->constraint(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->trajectory(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_poses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->landmark_poses(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph)
  return target;
}

size_t PoseGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->constraint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->constraint(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_poses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark_poses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoseGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PoseGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraph)
    MergeFrom(*source);
  }
}

void PoseGraph::MergeFrom(const PoseGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraint_.MergeFrom(from.constraint_);
  trajectory_.MergeFrom(from.trajectory_);
  landmark_poses_.MergeFrom(from.landmark_poses_);
}

void PoseGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraph::CopyFrom(const PoseGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph::IsInitialized() const {
  return true;
}

void PoseGraph::Swap(PoseGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraph::InternalSwap(PoseGraph* other) {
  using std::swap;
  constraint_.InternalSwap(&other->constraint_);
  trajectory_.InternalSwap(&other->trajectory_);
  landmark_poses_.InternalSwap(&other->landmark_poses_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PoseGraph::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseGraph

// repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
int PoseGraph::constraint_size() const {
  return constraint_.size();
}
void PoseGraph::clear_constraint() {
  constraint_.Clear();
}
const ::csmlio::mapping::proto::PoseGraph_Constraint& PoseGraph::constraint(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_.Get(index);
}
::csmlio::mapping::proto::PoseGraph_Constraint* PoseGraph::mutable_constraint(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_.Mutable(index);
}
::csmlio::mapping::proto::PoseGraph_Constraint* PoseGraph::add_constraint() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::PoseGraph_Constraint >*
PoseGraph::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.constraint)
  return &constraint_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::PoseGraph_Constraint >&
PoseGraph::constraint() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.constraint)
  return constraint_;
}

// repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
int PoseGraph::trajectory_size() const {
  return trajectory_.size();
}
void PoseGraph::clear_trajectory() {
  trajectory_.Clear();
}
const ::csmlio::mapping::proto::Trajectory& PoseGraph::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_.Get(index);
}
::csmlio::mapping::proto::Trajectory* PoseGraph::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_.Mutable(index);
}
::csmlio::mapping::proto::Trajectory* PoseGraph::add_trajectory() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Trajectory >*
PoseGraph::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.trajectory)
  return &trajectory_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Trajectory >&
PoseGraph::trajectory() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.trajectory)
  return trajectory_;
}

// repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
int PoseGraph::landmark_poses_size() const {
  return landmark_poses_.size();
}
void PoseGraph::clear_landmark_poses() {
  landmark_poses_.Clear();
}
const ::csmlio::mapping::proto::PoseGraph_LandmarkPose& PoseGraph::landmark_poses(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_.Get(index);
}
::csmlio::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::mutable_landmark_poses(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_.Mutable(index);
}
::csmlio::mapping::proto::PoseGraph_LandmarkPose* PoseGraph::add_landmark_poses() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::PoseGraph_LandmarkPose >*
PoseGraph::mutable_landmark_poses() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return &landmark_poses_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::PoseGraph_LandmarkPose >&
PoseGraph::landmark_poses() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.PoseGraph.landmark_poses)
  return landmark_poses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)
