// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmlio/lio/proto/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmlio {
namespace mapping {
namespace proto {
class Trajectory_NodeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Trajectory_Node>
     _instance;
} _Trajectory_Node_default_instance_;
class Trajectory_SubmapDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Trajectory_Submap>
     _instance;
} _Trajectory_Submap_default_instance_;
class TrajectoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
     _instance;
} _Trajectory_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, node_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Node, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, submap_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory_Submap, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, submap_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(Trajectory_Node)},
  { 8, -1, sizeof(Trajectory_Submap)},
  { 15, -1, sizeof(Trajectory)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_Submap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/trajectory.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _Trajectory_Node_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Trajectory_Node_default_instance_);_Trajectory_Submap_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Trajectory_Submap_default_instance_);_Trajectory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Trajectory_default_instance_);_Trajectory_Node_default_instance_._instance.get_mutable()->pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _Trajectory_Submap_default_instance_._instance.get_mutable()->pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n+cartographer/mapping/proto/trajectory."
      "proto\022\032cartographer.mapping.proto\032,carto"
      "grapher/transform/proto/transform.proto\""
      "\326\002\n\nTrajectory\022\025\n\rtrajectory_id\030\003 \001(\005\0229\n"
      "\004node\030\001 \003(\0132+.cartographer.mapping.proto"
      ".Trajectory.Node\022=\n\006submap\030\002 \003(\0132-.carto"
      "grapher.mapping.proto.Trajectory.Submap\032"
      "b\n\004Node\022\022\n\nnode_index\030\007 \001(\005\022\021\n\ttimestamp"
      "\030\001 \001(\003\0223\n\004pose\030\005 \001(\0132%.cartographer.tran"
      "sform.proto.Rigid3d\032S\n\006Submap\022\024\n\014submap_"
      "index\030\002 \001(\005\0223\n\004pose\030\001 \001(\0132%.cartographer"
      ".transform.proto.Rigid3dB\026B\024TrajectoryOu"
      "terClassb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 496);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory.proto", &protobuf_RegisterTypes);
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory_Node::kNodeIndexFieldNumber;
const int Trajectory_Node::kTimestampFieldNumber;
const int Trajectory_Node::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory_Node::Trajectory_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory.Node)
}
Trajectory_Node::Trajectory_Node(const Trajectory_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::csmlio::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(node_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Node)
}

void Trajectory_Node::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(node_index_));
  _cached_size_ = 0;
}

Trajectory_Node::~Trajectory_Node() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Node)
  SharedDtor();
}

void Trajectory_Node::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void Trajectory_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Node::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory_Node& Trajectory_Node::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory_Node* Trajectory_Node::New(::google::protobuf::Arena* arena) const {
  Trajectory_Node* n = new Trajectory_Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(node_index_));
  _internal_metadata_.Clear();
}

bool Trajectory_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Trajectory.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Trajectory.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Trajectory.Node)
  return false;
#undef DO_
}

void Trajectory_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Trajectory.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pose_, output);
  }

  // int32 node_index = 7;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->node_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Trajectory.Node)
}

::google::protobuf::uint8* Trajectory_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->pose_, deterministic, target);
  }

  // int32 node_index = 7;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->node_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Node)
  return target;
}

size_t Trajectory_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 5;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 node_index = 7;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory.Node)
    MergeFrom(*source);
  }
}

void Trajectory_Node::MergeFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
}

void Trajectory_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Node::CopyFrom(const Trajectory_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Node::IsInitialized() const {
  return true;
}

void Trajectory_Node::Swap(Trajectory_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory_Node::InternalSwap(Trajectory_Node* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  swap(node_index_, other->node_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory_Node::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory_Node

// int32 node_index = 7;
void Trajectory_Node::clear_node_index() {
  node_index_ = 0;
}
::google::protobuf::int32 Trajectory_Node::node_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.node_index)
  return node_index_;
}
void Trajectory_Node::set_node_index(::google::protobuf::int32 value) {
  
  node_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.node_index)
}

// int64 timestamp = 1;
void Trajectory_Node::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Trajectory_Node::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.timestamp)
  return timestamp_;
}
void Trajectory_Node::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Node.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 5;
bool Trajectory_Node::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void Trajectory_Node::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& Trajectory_Node::pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Node.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* Trajectory_Node::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Node.pose)
  return pose_;
}
::csmlio::transform::proto::Rigid3d* Trajectory_Node::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Node.pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Trajectory_Node::set_allocated_pose(::csmlio::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Node.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory_Submap::kSubmapIndexFieldNumber;
const int Trajectory_Submap::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory_Submap::Trajectory_Submap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory.Submap)
}
Trajectory_Submap::Trajectory_Submap(const Trajectory_Submap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::csmlio::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  submap_index_ = from.submap_index_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory.Submap)
}

void Trajectory_Submap::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(submap_index_));
  _cached_size_ = 0;
}

Trajectory_Submap::~Trajectory_Submap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory.Submap)
  SharedDtor();
}

void Trajectory_Submap::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void Trajectory_Submap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory_Submap::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory_Submap& Trajectory_Submap::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory_Submap* Trajectory_Submap::New(::google::protobuf::Arena* arena) const {
  Trajectory_Submap* n = new Trajectory_Submap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory_Submap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  submap_index_ = 0;
  _internal_metadata_.Clear();
}

bool Trajectory_Submap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Trajectory.Submap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 submap_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Trajectory.Submap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Trajectory.Submap)
  return false;
#undef DO_
}

void Trajectory_Submap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Trajectory.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Trajectory.Submap)
}

::google::protobuf::uint8* Trajectory_Submap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory.Submap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, deterministic, target);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory.Submap)
  return target;
}

size_t Trajectory_Submap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory.Submap)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory_Submap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory_Submap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory_Submap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory.Submap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory.Submap)
    MergeFrom(*source);
  }
}

void Trajectory_Submap::MergeFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory.Submap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.submap_index() != 0) {
    set_submap_index(from.submap_index());
  }
}

void Trajectory_Submap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory_Submap::CopyFrom(const Trajectory_Submap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory.Submap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory_Submap::IsInitialized() const {
  return true;
}

void Trajectory_Submap::Swap(Trajectory_Submap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory_Submap::InternalSwap(Trajectory_Submap* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(submap_index_, other->submap_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory_Submap::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory_Submap

// int32 submap_index = 2;
void Trajectory_Submap::clear_submap_index() {
  submap_index_ = 0;
}
::google::protobuf::int32 Trajectory_Submap::submap_index() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.submap_index)
  return submap_index_;
}
void Trajectory_Submap::set_submap_index(::google::protobuf::int32 value) {
  
  submap_index_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.Submap.submap_index)
}

// .cartographer.transform.proto.Rigid3d pose = 1;
bool Trajectory_Submap::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void Trajectory_Submap::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& Trajectory_Submap::pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.Submap.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* Trajectory_Submap::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.Submap.pose)
  return pose_;
}
::csmlio::transform::proto::Rigid3d* Trajectory_Submap::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Trajectory.Submap.pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Trajectory_Submap::set_allocated_pose(::csmlio::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Trajectory.Submap.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kTrajectoryIdFieldNumber;
const int Trajectory::kNodeFieldNumber;
const int Trajectory::kSubmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_(from.node_),
      submap_(from.submap_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trajectory_id_ = from.trajectory_id_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Trajectory)
}

void Trajectory::SharedCtor() {
  trajectory_id_ = 0;
  _cached_size_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  submap_.Clear();
  trajectory_id_ = 0;
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 trajectory_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(static_cast<int>(i)), output);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->submap_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->submap(static_cast<int>(i)), output);
  }

  // int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trajectory_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->node(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->submap_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->submap(static_cast<int>(i)), deterministic, target);
  }

  // int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trajectory_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Trajectory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->submap_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submap(static_cast<int>(i)));
    }
  }

  // int32 trajectory_id = 3;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  submap_.MergeFrom(from.submap_);
  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  node_.InternalSwap(&other->node_);
  submap_.InternalSwap(&other->submap_);
  swap(trajectory_id_, other->trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// int32 trajectory_id = 3;
void Trajectory::clear_trajectory_id() {
  trajectory_id_ = 0;
}
::google::protobuf::int32 Trajectory::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.trajectory_id)
  return trajectory_id_;
}
void Trajectory::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.Trajectory.trajectory_id)
}

// repeated .cartographer.mapping.proto.Trajectory.Node node = 1;
int Trajectory::node_size() const {
  return node_.size();
}
void Trajectory::clear_node() {
  node_.Clear();
}
const ::csmlio::mapping::proto::Trajectory_Node& Trajectory::node(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.node)
  return node_.Get(index);
}
::csmlio::mapping::proto::Trajectory_Node* Trajectory::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.node)
  return node_.Mutable(index);
}
::csmlio::mapping::proto::Trajectory_Node* Trajectory::add_node() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.node)
  return node_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Trajectory_Node >*
Trajectory::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.node)
  return &node_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Trajectory_Node >&
Trajectory::node() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.node)
  return node_;
}

// repeated .cartographer.mapping.proto.Trajectory.Submap submap = 2;
int Trajectory::submap_size() const {
  return submap_.size();
}
void Trajectory::clear_submap() {
  submap_.Clear();
}
const ::csmlio::mapping::proto::Trajectory_Submap& Trajectory::submap(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Get(index);
}
::csmlio::mapping::proto::Trajectory_Submap* Trajectory::mutable_submap(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Mutable(index);
}
::csmlio::mapping::proto::Trajectory_Submap* Trajectory::add_submap() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.Trajectory.submap)
  return submap_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Trajectory_Submap >*
Trajectory::mutable_submap() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.Trajectory.submap)
  return &submap_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Trajectory_Submap >&
Trajectory::submap() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.Trajectory.submap)
  return submap_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)
