// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmlio/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmlio {
namespace sensor {
namespace proto {
class RangefinderPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangefinderPoint>
     _instance;
} _RangefinderPoint_default_instance_;
class TimedRangefinderPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimedRangefinderPoint>
     _instance;
} _TimedRangefinderPoint_default_instance_;
class CompressedPointCloudDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CompressedPointCloud>
     _instance;
} _CompressedPointCloud_default_instance_;
class TimedPointCloudDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimedPointCloudData>
     _instance;
} _TimedPointCloudData_default_instance_;
class RangeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RangeData>
     _instance;
} _RangeData_default_instance_;
class ImuDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImuData>
     _instance;
} _ImuData_default_instance_;
class OdometryDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<OdometryData>
     _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FixedFramePoseData>
     _instance;
} _FixedFramePoseData_default_instance_;
class LandmarkData_LandmarkObservationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LandmarkData_LandmarkObservation>
     _instance;
} _LandmarkData_LandmarkObservation_default_instance_;
class LandmarkDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LandmarkData>
     _instance;
} _LandmarkData_default_instance_;

namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangefinderPoint, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedRangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedRangefinderPoint, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedRangefinderPoint, time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, num_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedPointCloud, point_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, point_data_legacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, point_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimedPointCloudData, intensities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, returns_legacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, misses_legacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, returns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeData, misses_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImuData, angular_velocity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OdometryData, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FixedFramePoseData, pose_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, landmark_to_tracking_transform_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, translation_weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData_LandmarkObservation, rotation_weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandmarkData, landmark_observations_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RangefinderPoint)},
  { 6, -1, sizeof(TimedRangefinderPoint)},
  { 13, -1, sizeof(CompressedPointCloud)},
  { 20, -1, sizeof(TimedPointCloudData)},
  { 30, -1, sizeof(RangeData)},
  { 40, -1, sizeof(ImuData)},
  { 48, -1, sizeof(OdometryData)},
  { 55, -1, sizeof(FixedFramePoseData)},
  { 62, -1, sizeof(LandmarkData_LandmarkObservation)},
  { 71, -1, sizeof(LandmarkData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangefinderPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimedRangefinderPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedPointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimedPointCloudData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RangeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OdometryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FixedFramePoseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandmarkData_LandmarkObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LandmarkData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/sensor/proto/sensor.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  _RangefinderPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangefinderPoint_default_instance_);_TimedRangefinderPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimedRangefinderPoint_default_instance_);_CompressedPointCloud_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CompressedPointCloud_default_instance_);_TimedPointCloudData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimedPointCloudData_default_instance_);_RangeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RangeData_default_instance_);_ImuData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImuData_default_instance_);_OdometryData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_OdometryData_default_instance_);_FixedFramePoseData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FixedFramePoseData_default_instance_);_LandmarkData_LandmarkObservation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LandmarkData_LandmarkObservation_default_instance_);_LandmarkData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LandmarkData_default_instance_);_RangefinderPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::csmlio::transform::proto::Vector3f*>(
      ::csmlio::transform::proto::Vector3f::internal_default_instance());
  _TimedRangefinderPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::csmlio::transform::proto::Vector3f*>(
      ::csmlio::transform::proto::Vector3f::internal_default_instance());
  _TimedPointCloudData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::csmlio::transform::proto::Vector3f*>(
      ::csmlio::transform::proto::Vector3f::internal_default_instance());
  _RangeData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::csmlio::transform::proto::Vector3f*>(
      ::csmlio::transform::proto::Vector3f::internal_default_instance());
  _ImuData_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::csmlio::transform::proto::Vector3d*>(
      ::csmlio::transform::proto::Vector3d::internal_default_instance());
  _ImuData_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::csmlio::transform::proto::Vector3d*>(
      ::csmlio::transform::proto::Vector3d::internal_default_instance());
  _OdometryData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _FixedFramePoseData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _LandmarkData_LandmarkObservation_default_instance_._instance.get_mutable()->landmark_to_tracking_transform_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&cartographer/sensor/proto/sensor.proto"
      "\022\031cartographer.sensor.proto\032,cartographe"
      "r/transform/proto/transform.proto\"L\n\020Ran"
      "gefinderPoint\0228\n\010position\030\001 \001(\0132&.cartog"
      "rapher.transform.proto.Vector3f\"_\n\025Timed"
      "RangefinderPoint\0228\n\010position\030\001 \001(\0132&.car"
      "tographer.transform.proto.Vector3f\022\014\n\004ti"
      "me\030\002 \001(\002\">\n\024CompressedPointCloud\022\022\n\nnum_"
      "points\030\001 \001(\005\022\022\n\npoint_data\030\003 \003(\005\"\376\001\n\023Tim"
      "edPointCloudData\022\021\n\ttimestamp\030\001 \001(\003\0226\n\006o"
      "rigin\030\002 \001(\0132&.cartographer.transform.pro"
      "to.Vector3f\022A\n\021point_data_legacy\030\003 \003(\0132&"
      ".cartographer.transform.proto.Vector4f\022D"
      "\n\npoint_data\030\004 \003(\01320.cartographer.sensor"
      ".proto.TimedRangefinderPoint\022\023\n\013intensit"
      "ies\030\005 \003(\002\"\275\002\n\tRangeData\0226\n\006origin\030\001 \001(\0132"
      "&.cartographer.transform.proto.Vector3f\022"
      ">\n\016returns_legacy\030\002 \003(\0132&.cartographer.t"
      "ransform.proto.Vector3f\022=\n\rmisses_legacy"
      "\030\003 \003(\0132&.cartographer.transform.proto.Ve"
      "ctor3f\022<\n\007returns\030\004 \003(\0132+.cartographer.s"
      "ensor.proto.RangefinderPoint\022;\n\006misses\030\005"
      " \003(\0132+.cartographer.sensor.proto.Rangefi"
      "nderPoint\"\243\001\n\007ImuData\022\021\n\ttimestamp\030\001 \001(\003"
      "\022C\n\023linear_acceleration\030\002 \001(\0132&.cartogra"
      "pher.transform.proto.Vector3d\022@\n\020angular"
      "_velocity\030\003 \001(\0132&.cartographer.transform"
      ".proto.Vector3d\"V\n\014OdometryData\022\021\n\ttimes"
      "tamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%.cartographer."
      "transform.proto.Rigid3d\"\\\n\022FixedFramePos"
      "eData\022\021\n\ttimestamp\030\001 \001(\003\0223\n\004pose\030\002 \001(\0132%"
      ".cartographer.transform.proto.Rigid3d\"\245\002"
      "\n\014LandmarkData\022\021\n\ttimestamp\030\001 \001(\003\022Z\n\025lan"
      "dmark_observations\030\002 \003(\0132;.cartographer."
      "sensor.proto.LandmarkData.LandmarkObserv"
      "ation\032\245\001\n\023LandmarkObservation\022\n\n\002id\030\001 \001("
      "\014\022M\n\036landmark_to_tracking_transform\030\002 \001("
      "\0132%.cartographer.transform.proto.Rigid3d"
      "\022\032\n\022translation_weight\030\003 \001(\001\022\027\n\017rotation"
      "_weight\030\004 \001(\001B\010B\006Sensorb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1591);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/sensor/proto/sensor.proto", &protobuf_RegisterTypes);
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangefinderPoint::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangefinderPoint::RangefinderPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangefinderPoint)
}
RangefinderPoint::RangefinderPoint(const RangefinderPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::csmlio::transform::proto::Vector3f(*from.position_);
  } else {
    position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangefinderPoint)
}

void RangefinderPoint::SharedCtor() {
  position_ = NULL;
  _cached_size_ = 0;
}

RangefinderPoint::~RangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangefinderPoint)
  SharedDtor();
}

void RangefinderPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void RangefinderPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangefinderPoint::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangefinderPoint& RangefinderPoint::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangefinderPoint* RangefinderPoint::New(::google::protobuf::Arena* arena) const {
  RangefinderPoint* n = new RangefinderPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  _internal_metadata_.Clear();
}

bool RangefinderPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.RangefinderPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.RangefinderPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.RangefinderPoint)
  return false;
#undef DO_
}

void RangefinderPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.RangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.RangefinderPoint)
}

::google::protobuf::uint8* RangefinderPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangefinderPoint)
  return target;
}

size_t RangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangefinderPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangefinderPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RangefinderPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangefinderPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangefinderPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangefinderPoint)
    MergeFrom(*source);
  }
}

void RangefinderPoint::MergeFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::csmlio::transform::proto::Vector3f::MergeFrom(from.position());
  }
}

void RangefinderPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangefinderPoint::CopyFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangefinderPoint::IsInitialized() const {
  return true;
}

void RangefinderPoint::Swap(RangefinderPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangefinderPoint::InternalSwap(RangefinderPoint* other) {
  using std::swap;
  swap(position_, other->position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangefinderPoint::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangefinderPoint

// .cartographer.transform.proto.Vector3f position = 1;
bool RangefinderPoint::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void RangefinderPoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::csmlio::transform::proto::Vector3f& RangefinderPoint::position() const {
  const ::csmlio::transform::proto::Vector3f* p = position_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangefinderPoint.position)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Vector3f*>(
      &::csmlio::transform::proto::_Vector3f_default_instance_);
}
::csmlio::transform::proto::Vector3f* RangefinderPoint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::csmlio::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangefinderPoint.position)
  return position_;
}
::csmlio::transform::proto::Vector3f* RangefinderPoint::release_position() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.RangefinderPoint.position)
  
  ::csmlio::transform::proto::Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}
void RangefinderPoint::set_allocated_position(::csmlio::transform::proto::Vector3f* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.RangefinderPoint.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimedRangefinderPoint::kPositionFieldNumber;
const int TimedRangefinderPoint::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimedRangefinderPoint::TimedRangefinderPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}
TimedRangefinderPoint::TimedRangefinderPoint(const TimedRangefinderPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::csmlio::transform::proto::Vector3f(*from.position_);
  } else {
    position_ = NULL;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}

void TimedRangefinderPoint::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&position_)) + sizeof(time_));
  _cached_size_ = 0;
}

TimedRangefinderPoint::~TimedRangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedRangefinderPoint)
  SharedDtor();
}

void TimedRangefinderPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void TimedRangefinderPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimedRangefinderPoint::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimedRangefinderPoint& TimedRangefinderPoint::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimedRangefinderPoint* TimedRangefinderPoint::New(::google::protobuf::Arena* arena) const {
  TimedRangefinderPoint* n = new TimedRangefinderPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimedRangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  time_ = 0;
  _internal_metadata_.Clear();
}

bool TimedRangefinderPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.TimedRangefinderPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.TimedRangefinderPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.TimedRangefinderPoint)
  return false;
#undef DO_
}

void TimedRangefinderPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // float time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.TimedRangefinderPoint)
}

::google::protobuf::uint8* TimedRangefinderPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // float time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedRangefinderPoint)
  return target;
}

size_t TimedRangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedRangefinderPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // float time = 2;
  if (this->time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimedRangefinderPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedRangefinderPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimedRangefinderPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedRangefinderPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedRangefinderPoint)
    MergeFrom(*source);
  }
}

void TimedRangefinderPoint::MergeFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::csmlio::transform::proto::Vector3f::MergeFrom(from.position());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void TimedRangefinderPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedRangefinderPoint::CopyFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedRangefinderPoint::IsInitialized() const {
  return true;
}

void TimedRangefinderPoint::Swap(TimedRangefinderPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimedRangefinderPoint::InternalSwap(TimedRangefinderPoint* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(time_, other->time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimedRangefinderPoint::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimedRangefinderPoint

// .cartographer.transform.proto.Vector3f position = 1;
bool TimedRangefinderPoint::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void TimedRangefinderPoint::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::csmlio::transform::proto::Vector3f& TimedRangefinderPoint::position() const {
  const ::csmlio::transform::proto::Vector3f* p = position_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedRangefinderPoint.position)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Vector3f*>(
      &::csmlio::transform::proto::_Vector3f_default_instance_);
}
::csmlio::transform::proto::Vector3f* TimedRangefinderPoint::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::csmlio::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedRangefinderPoint.position)
  return position_;
}
::csmlio::transform::proto::Vector3f* TimedRangefinderPoint::release_position() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.TimedRangefinderPoint.position)
  
  ::csmlio::transform::proto::Vector3f* temp = position_;
  position_ = NULL;
  return temp;
}
void TimedRangefinderPoint::set_allocated_position(::csmlio::transform::proto::Vector3f* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.TimedRangefinderPoint.position)
}

// float time = 2;
void TimedRangefinderPoint::clear_time() {
  time_ = 0;
}
float TimedRangefinderPoint::time() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedRangefinderPoint.time)
  return time_;
}
void TimedRangefinderPoint::set_time(float value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedRangefinderPoint.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedPointCloud)
}
CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_data_(from.point_data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_points_ = from.num_points_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::SharedCtor() {
  num_points_ = 0;
  _cached_size_ = 0;
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
}

void CompressedPointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedPointCloud::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CompressedPointCloud& CompressedPointCloud::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedPointCloud* CompressedPointCloud::New(::google::protobuf::Arena* arena) const {
  CompressedPointCloud* n = new CompressedPointCloud;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_.Clear();
  num_points_ = 0;
  _internal_metadata_.Clear();
}

bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.CompressedPointCloud)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 point_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_point_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.CompressedPointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.CompressedPointCloud)
  return false;
#undef DO_
}

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _point_data_cached_byte_size_));
  }
  for (int i = 0, n = this->point_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.CompressedPointCloud)
}

::google::protobuf::uint8* CompressedPointCloud::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _point_data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

size_t CompressedPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 point_data = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->point_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedPointCloud* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedPointCloud>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedPointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedPointCloud)
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_.MergeFrom(from.point_data_);
  if (from.num_points() != 0) {
    set_num_points(from.num_points());
  }
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {
  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  using std::swap;
  point_data_.InternalSwap(&other->point_data_);
  swap(num_points_, other->num_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedPointCloud

// int32 num_points = 1;
void CompressedPointCloud::clear_num_points() {
  num_points_ = 0;
}
::google::protobuf::int32 CompressedPointCloud::num_points() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.num_points)
  return num_points_;
}
void CompressedPointCloud::set_num_points(::google::protobuf::int32 value) {
  
  num_points_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.num_points)
}

// repeated int32 point_data = 3;
int CompressedPointCloud::point_data_size() const {
  return point_data_.size();
}
void CompressedPointCloud::clear_point_data() {
  point_data_.Clear();
}
::google::protobuf::int32 CompressedPointCloud::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_.Get(index);
}
void CompressedPointCloud::set_point_data(int index, ::google::protobuf::int32 value) {
  point_data_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
void CompressedPointCloud::add_point_data(::google::protobuf::int32 value) {
  point_data_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.CompressedPointCloud.point_data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompressedPointCloud::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return point_data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompressedPointCloud::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.CompressedPointCloud.point_data)
  return &point_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimedPointCloudData::kTimestampFieldNumber;
const int TimedPointCloudData::kOriginFieldNumber;
const int TimedPointCloudData::kPointDataLegacyFieldNumber;
const int TimedPointCloudData::kPointDataFieldNumber;
const int TimedPointCloudData::kIntensitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimedPointCloudData::TimedPointCloudData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedPointCloudData)
}
TimedPointCloudData::TimedPointCloudData(const TimedPointCloudData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      point_data_legacy_(from.point_data_legacy_),
      point_data_(from.point_data_),
      intensities_(from.intensities_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::csmlio::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedPointCloudData)
}

void TimedPointCloudData::SharedCtor() {
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

TimedPointCloudData::~TimedPointCloudData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedPointCloudData)
  SharedDtor();
}

void TimedPointCloudData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void TimedPointCloudData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimedPointCloudData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimedPointCloudData& TimedPointCloudData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimedPointCloudData* TimedPointCloudData::New(::google::protobuf::Arena* arena) const {
  TimedPointCloudData* n = new TimedPointCloudData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimedPointCloudData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedPointCloudData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_legacy_.Clear();
  point_data_.Clear();
  intensities_.Clear();
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool TimedPointCloudData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.TimedPointCloudData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3f origin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_data_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float intensities = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_intensities())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_intensities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.TimedPointCloudData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.TimedPointCloudData)
  return false;
#undef DO_
}

void TimedPointCloudData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.TimedPointCloudData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->origin_, output);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_legacy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->point_data_legacy(static_cast<int>(i)), output);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->point_data(static_cast<int>(i)), output);
  }

  // repeated float intensities = 5;
  if (this->intensities_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _intensities_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->intensities().data(), this->intensities_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.TimedPointCloudData)
}

::google::protobuf::uint8* TimedPointCloudData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedPointCloudData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->origin_, deterministic, target);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_legacy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->point_data_legacy(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->point_data(static_cast<int>(i)), deterministic, target);
  }

  // repeated float intensities = 5;
  if (this->intensities_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _intensities_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->intensities_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedPointCloudData)
  return target;
}

size_t TimedPointCloudData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedPointCloudData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_data_legacy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_data_legacy(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->point_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_data(static_cast<int>(i)));
    }
  }

  // repeated float intensities = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->intensities_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _intensities_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->origin_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimedPointCloudData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedPointCloudData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimedPointCloudData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedPointCloudData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedPointCloudData)
    MergeFrom(*source);
  }
}

void TimedPointCloudData::MergeFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_legacy_.MergeFrom(from.point_data_legacy_);
  point_data_.MergeFrom(from.point_data_);
  intensities_.MergeFrom(from.intensities_);
  if (from.has_origin()) {
    mutable_origin()->::csmlio::transform::proto::Vector3f::MergeFrom(from.origin());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TimedPointCloudData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedPointCloudData::CopyFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedPointCloudData::IsInitialized() const {
  return true;
}

void TimedPointCloudData::Swap(TimedPointCloudData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimedPointCloudData::InternalSwap(TimedPointCloudData* other) {
  using std::swap;
  point_data_legacy_.InternalSwap(&other->point_data_legacy_);
  point_data_.InternalSwap(&other->point_data_);
  intensities_.InternalSwap(&other->intensities_);
  swap(origin_, other->origin_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimedPointCloudData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimedPointCloudData

// int64 timestamp = 1;
void TimedPointCloudData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TimedPointCloudData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.timestamp)
  return timestamp_;
}
void TimedPointCloudData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedPointCloudData.timestamp)
}

// .cartographer.transform.proto.Vector3f origin = 2;
bool TimedPointCloudData::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
void TimedPointCloudData::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
const ::csmlio::transform::proto::Vector3f& TimedPointCloudData::origin() const {
  const ::csmlio::transform::proto::Vector3f* p = origin_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Vector3f*>(
      &::csmlio::transform::proto::_Vector3f_default_instance_);
}
::csmlio::transform::proto::Vector3f* TimedPointCloudData::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::csmlio::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.origin)
  return origin_;
}
::csmlio::transform::proto::Vector3f* TimedPointCloudData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.TimedPointCloudData.origin)
  
  ::csmlio::transform::proto::Vector3f* temp = origin_;
  origin_ = NULL;
  return temp;
}
void TimedPointCloudData::set_allocated_origin(::csmlio::transform::proto::Vector3f* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.TimedPointCloudData.origin)
}

// repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
int TimedPointCloudData::point_data_legacy_size() const {
  return point_data_legacy_.size();
}
void TimedPointCloudData::clear_point_data_legacy() {
  point_data_legacy_.Clear();
}
const ::csmlio::transform::proto::Vector4f& TimedPointCloudData::point_data_legacy(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return point_data_legacy_.Get(index);
}
::csmlio::transform::proto::Vector4f* TimedPointCloudData::mutable_point_data_legacy(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return point_data_legacy_.Mutable(index);
}
::csmlio::transform::proto::Vector4f* TimedPointCloudData::add_point_data_legacy() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return point_data_legacy_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::transform::proto::Vector4f >*
TimedPointCloudData::mutable_point_data_legacy() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return &point_data_legacy_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::transform::proto::Vector4f >&
TimedPointCloudData::point_data_legacy() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.point_data_legacy)
  return point_data_legacy_;
}

// repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
int TimedPointCloudData::point_data_size() const {
  return point_data_.size();
}
void TimedPointCloudData::clear_point_data() {
  point_data_.Clear();
}
const ::csmlio::sensor::proto::TimedRangefinderPoint& TimedPointCloudData::point_data(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Get(index);
}
::csmlio::sensor::proto::TimedRangefinderPoint* TimedPointCloudData::mutable_point_data(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Mutable(index);
}
::csmlio::sensor::proto::TimedRangefinderPoint* TimedPointCloudData::add_point_data() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::TimedRangefinderPoint >*
TimedPointCloudData::mutable_point_data() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return &point_data_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::TimedRangefinderPoint >&
TimedPointCloudData::point_data() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.point_data)
  return point_data_;
}

// repeated float intensities = 5;
int TimedPointCloudData::intensities_size() const {
  return intensities_.size();
}
void TimedPointCloudData::clear_intensities() {
  intensities_.Clear();
}
float TimedPointCloudData::intensities(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.TimedPointCloudData.intensities)
  return intensities_.Get(index);
}
void TimedPointCloudData::set_intensities(int index, float value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.TimedPointCloudData.intensities)
}
void TimedPointCloudData::add_intensities(float value) {
  intensities_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.TimedPointCloudData.intensities)
}
const ::google::protobuf::RepeatedField< float >&
TimedPointCloudData::intensities() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.TimedPointCloudData.intensities)
  return intensities_;
}
::google::protobuf::RepeatedField< float >*
TimedPointCloudData::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.TimedPointCloudData.intensities)
  return &intensities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeData::kOriginFieldNumber;
const int RangeData::kReturnsLegacyFieldNumber;
const int RangeData::kMissesLegacyFieldNumber;
const int RangeData::kReturnsFieldNumber;
const int RangeData::kMissesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeData::RangeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangeData)
}
RangeData::RangeData(const RangeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      returns_legacy_(from.returns_legacy_),
      misses_legacy_(from.misses_legacy_),
      returns_(from.returns_),
      misses_(from.misses_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::csmlio::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangeData)
}

void RangeData::SharedCtor() {
  origin_ = NULL;
  _cached_size_ = 0;
}

RangeData::~RangeData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangeData)
  SharedDtor();
}

void RangeData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void RangeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RangeData& RangeData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

RangeData* RangeData::New(::google::protobuf::Arena* arena) const {
  RangeData* n = new RangeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  returns_legacy_.Clear();
  misses_legacy_.Clear();
  returns_.Clear();
  misses_.Clear();
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
  _internal_metadata_.Clear();
}

bool RangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.RangeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_returns_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_misses_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_returns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_misses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.RangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.RangeData)
  return false;
#undef DO_
}

void RangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.RangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_legacy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->returns_legacy(static_cast<int>(i)), output);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_legacy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->misses_legacy(static_cast<int>(i)), output);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->returns(static_cast<int>(i)), output);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->misses(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.RangeData)
}

::google::protobuf::uint8* RangeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_legacy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->returns_legacy(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_legacy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->misses_legacy(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->returns(static_cast<int>(i)), deterministic, target);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->misses(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangeData)
  return target;
}

size_t RangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangeData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->returns_legacy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->returns_legacy(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->misses_legacy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misses_legacy(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->returns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->returns(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->misses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->misses(static_cast<int>(i)));
    }
  }

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->origin_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RangeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangeData)
    MergeFrom(*source);
  }
}

void RangeData::MergeFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  returns_legacy_.MergeFrom(from.returns_legacy_);
  misses_legacy_.MergeFrom(from.misses_legacy_);
  returns_.MergeFrom(from.returns_);
  misses_.MergeFrom(from.misses_);
  if (from.has_origin()) {
    mutable_origin()->::csmlio::transform::proto::Vector3f::MergeFrom(from.origin());
  }
}

void RangeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeData::CopyFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeData::IsInitialized() const {
  return true;
}

void RangeData::Swap(RangeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeData::InternalSwap(RangeData* other) {
  using std::swap;
  returns_legacy_.InternalSwap(&other->returns_legacy_);
  misses_legacy_.InternalSwap(&other->misses_legacy_);
  returns_.InternalSwap(&other->returns_);
  misses_.InternalSwap(&other->misses_);
  swap(origin_, other->origin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RangeData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RangeData

// .cartographer.transform.proto.Vector3f origin = 1;
bool RangeData::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
void RangeData::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) delete origin_;
  origin_ = NULL;
}
const ::csmlio::transform::proto::Vector3f& RangeData::origin() const {
  const ::csmlio::transform::proto::Vector3f* p = origin_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Vector3f*>(
      &::csmlio::transform::proto::_Vector3f_default_instance_);
}
::csmlio::transform::proto::Vector3f* RangeData::mutable_origin() {
  
  if (origin_ == NULL) {
    origin_ = new ::csmlio::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.origin)
  return origin_;
}
::csmlio::transform::proto::Vector3f* RangeData::release_origin() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.RangeData.origin)
  
  ::csmlio::transform::proto::Vector3f* temp = origin_;
  origin_ = NULL;
  return temp;
}
void RangeData::set_allocated_origin(::csmlio::transform::proto::Vector3f* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.RangeData.origin)
}

// repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
int RangeData::returns_legacy_size() const {
  return returns_legacy_.size();
}
void RangeData::clear_returns_legacy() {
  returns_legacy_.Clear();
}
const ::csmlio::transform::proto::Vector3f& RangeData::returns_legacy(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.returns_legacy)
  return returns_legacy_.Get(index);
}
::csmlio::transform::proto::Vector3f* RangeData::mutable_returns_legacy(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.returns_legacy)
  return returns_legacy_.Mutable(index);
}
::csmlio::transform::proto::Vector3f* RangeData::add_returns_legacy() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.returns_legacy)
  return returns_legacy_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::transform::proto::Vector3f >*
RangeData::mutable_returns_legacy() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.returns_legacy)
  return &returns_legacy_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::transform::proto::Vector3f >&
RangeData::returns_legacy() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.returns_legacy)
  return returns_legacy_;
}

// repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
int RangeData::misses_legacy_size() const {
  return misses_legacy_.size();
}
void RangeData::clear_misses_legacy() {
  misses_legacy_.Clear();
}
const ::csmlio::transform::proto::Vector3f& RangeData::misses_legacy(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.misses_legacy)
  return misses_legacy_.Get(index);
}
::csmlio::transform::proto::Vector3f* RangeData::mutable_misses_legacy(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.misses_legacy)
  return misses_legacy_.Mutable(index);
}
::csmlio::transform::proto::Vector3f* RangeData::add_misses_legacy() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.misses_legacy)
  return misses_legacy_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::transform::proto::Vector3f >*
RangeData::mutable_misses_legacy() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.misses_legacy)
  return &misses_legacy_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::transform::proto::Vector3f >&
RangeData::misses_legacy() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.misses_legacy)
  return misses_legacy_;
}

// repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
int RangeData::returns_size() const {
  return returns_.size();
}
void RangeData::clear_returns() {
  returns_.Clear();
}
const ::csmlio::sensor::proto::RangefinderPoint& RangeData::returns(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.returns)
  return returns_.Get(index);
}
::csmlio::sensor::proto::RangefinderPoint* RangeData::mutable_returns(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.returns)
  return returns_.Mutable(index);
}
::csmlio::sensor::proto::RangefinderPoint* RangeData::add_returns() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.returns)
  return returns_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::RangefinderPoint >*
RangeData::mutable_returns() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.returns)
  return &returns_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::RangefinderPoint >&
RangeData::returns() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.returns)
  return returns_;
}

// repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
int RangeData::misses_size() const {
  return misses_.size();
}
void RangeData::clear_misses() {
  misses_.Clear();
}
const ::csmlio::sensor::proto::RangefinderPoint& RangeData::misses(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.RangeData.misses)
  return misses_.Get(index);
}
::csmlio::sensor::proto::RangefinderPoint* RangeData::mutable_misses(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.RangeData.misses)
  return misses_.Mutable(index);
}
::csmlio::sensor::proto::RangefinderPoint* RangeData::add_misses() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.RangeData.misses)
  return misses_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::RangefinderPoint >*
RangeData::mutable_misses() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.RangeData.misses)
  return &misses_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::RangefinderPoint >&
RangeData::misses() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.RangeData.misses)
  return misses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTimestampFieldNumber;
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::csmlio::transform::proto::Vector3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::csmlio::transform::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::SharedCtor() {
  ::memset(&linear_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&linear_acceleration_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void ImuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImuData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImuData& ImuData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImuData* ImuData::New(::google::protobuf::Arena* arena) const {
  ImuData* n = new ImuData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.ImuData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.ImuData)
  return false;
#undef DO_
}

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->linear_acceleration_, output);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->angular_velocity_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->linear_acceleration_, deterministic, target);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->angular_velocity_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImuData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::csmlio::transform::proto::Vector3d::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::csmlio::transform::proto::Vector3d::MergeFrom(from.angular_velocity());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImuData

// int64 timestamp = 1;
void ImuData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ImuData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.timestamp)
  return timestamp_;
}
void ImuData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.ImuData.timestamp)
}

// .cartographer.transform.proto.Vector3d linear_acceleration = 2;
bool ImuData::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
void ImuData::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::csmlio::transform::proto::Vector3d& ImuData::linear_acceleration() const {
  const ::csmlio::transform::proto::Vector3d* p = linear_acceleration_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.linear_acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Vector3d*>(
      &::csmlio::transform::proto::_Vector3d_default_instance_);
}
::csmlio::transform::proto::Vector3d* ImuData::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::csmlio::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.linear_acceleration)
  return linear_acceleration_;
}
::csmlio::transform::proto::Vector3d* ImuData::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.linear_acceleration)
  
  ::csmlio::transform::proto::Vector3d* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void ImuData::set_allocated_linear_acceleration(::csmlio::transform::proto::Vector3d* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.linear_acceleration)
}

// .cartographer.transform.proto.Vector3d angular_velocity = 3;
bool ImuData::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
void ImuData::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::csmlio::transform::proto::Vector3d& ImuData::angular_velocity() const {
  const ::csmlio::transform::proto::Vector3d* p = angular_velocity_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.ImuData.angular_velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Vector3d*>(
      &::csmlio::transform::proto::_Vector3d_default_instance_);
}
::csmlio::transform::proto::Vector3d* ImuData::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::csmlio::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.ImuData.angular_velocity)
  return angular_velocity_;
}
::csmlio::transform::proto::Vector3d* ImuData::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.ImuData.angular_velocity)
  
  ::csmlio::transform::proto::Vector3d* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void ImuData::set_allocated_angular_velocity(::csmlio::transform::proto::Vector3d* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.ImuData.angular_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTimestampFieldNumber;
const int OdometryData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::csmlio::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void OdometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OdometryData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OdometryData& OdometryData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

OdometryData* OdometryData::New(::google::protobuf::Arena* arena) const {
  OdometryData* n = new OdometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.OdometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.OdometryData)
  return false;
#undef DO_
}

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OdometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryData

// int64 timestamp = 1;
void OdometryData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 OdometryData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.timestamp)
  return timestamp_;
}
void OdometryData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.OdometryData.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 2;
bool OdometryData::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void OdometryData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& OdometryData::pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.OdometryData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* OdometryData::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.OdometryData.pose)
  return pose_;
}
::csmlio::transform::proto::Rigid3d* OdometryData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.OdometryData.pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void OdometryData::set_allocated_pose(::csmlio::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.OdometryData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTimestampFieldNumber;
const int FixedFramePoseData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::csmlio::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
  _cached_size_ = 0;
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FixedFramePoseData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedFramePoseData& FixedFramePoseData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixedFramePoseData* FixedFramePoseData::New(::google::protobuf::Arena* arena) const {
  FixedFramePoseData* n = new FixedFramePoseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.FixedFramePoseData)
  return false;
#undef DO_
}

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pose_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pose_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedFramePoseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixedFramePoseData

// int64 timestamp = 1;
void FixedFramePoseData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FixedFramePoseData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.timestamp)
  return timestamp_;
}
void FixedFramePoseData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.FixedFramePoseData.timestamp)
}

// .cartographer.transform.proto.Rigid3d pose = 2;
bool FixedFramePoseData::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
void FixedFramePoseData::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& FixedFramePoseData::pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = pose_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.FixedFramePoseData.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* FixedFramePoseData::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.FixedFramePoseData.pose)
  return pose_;
}
::csmlio::transform::proto::Rigid3d* FixedFramePoseData::release_pose() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.FixedFramePoseData.pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
void FixedFramePoseData::set_allocated_pose(::csmlio::transform::proto::Rigid3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.FixedFramePoseData.pose)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData_LandmarkObservation::kIdFieldNumber;
const int LandmarkData_LandmarkObservation::kLandmarkToTrackingTransformFieldNumber;
const int LandmarkData_LandmarkObservation::kTranslationWeightFieldNumber;
const int LandmarkData_LandmarkObservation::kRotationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}
LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(const LandmarkData_LandmarkObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_landmark_to_tracking_transform()) {
    landmark_to_tracking_transform_ = new ::csmlio::transform::proto::Rigid3d(*from.landmark_to_tracking_transform_);
  } else {
    landmark_to_tracking_transform_ = NULL;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_weight_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

void LandmarkData_LandmarkObservation::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&landmark_to_tracking_transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&landmark_to_tracking_transform_)) + sizeof(rotation_weight_));
  _cached_size_ = 0;
}

LandmarkData_LandmarkObservation::~LandmarkData_LandmarkObservation() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  SharedDtor();
}

void LandmarkData_LandmarkObservation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete landmark_to_tracking_transform_;
}

void LandmarkData_LandmarkObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData_LandmarkObservation::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkData_LandmarkObservation& LandmarkData_LandmarkObservation::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandmarkData_LandmarkObservation* LandmarkData_LandmarkObservation::New(::google::protobuf::Arena* arena) const {
  LandmarkData_LandmarkObservation* n = new LandmarkData_LandmarkObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData_LandmarkObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && landmark_to_tracking_transform_ != NULL) {
    delete landmark_to_tracking_transform_;
  }
  landmark_to_tracking_transform_ = NULL;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  _internal_metadata_.Clear();
}

bool LandmarkData_LandmarkObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_landmark_to_tracking_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double translation_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return false;
#undef DO_
}

void LandmarkData_LandmarkObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->landmark_to_tracking_transform_, output);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->translation_weight(), output);
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rotation_weight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

::google::protobuf::uint8* LandmarkData_LandmarkObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->landmark_to_tracking_transform_, deterministic, target);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->translation_weight(), target);
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rotation_weight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return target;
}

size_t LandmarkData_LandmarkObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->landmark_to_tracking_transform_);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData_LandmarkObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData_LandmarkObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData_LandmarkObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    MergeFrom(*source);
  }
}

void LandmarkData_LandmarkObservation::MergeFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_landmark_to_tracking_transform()) {
    mutable_landmark_to_tracking_transform()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.landmark_to_tracking_transform());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
}

void LandmarkData_LandmarkObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData_LandmarkObservation::CopyFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData_LandmarkObservation::IsInitialized() const {
  return true;
}

void LandmarkData_LandmarkObservation::Swap(LandmarkData_LandmarkObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData_LandmarkObservation::InternalSwap(LandmarkData_LandmarkObservation* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(landmark_to_tracking_transform_, other->landmark_to_tracking_transform_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData_LandmarkObservation::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkData_LandmarkObservation

// bytes id = 1;
void LandmarkData_LandmarkObservation::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LandmarkData_LandmarkObservation::id() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  return id_.GetNoArena();
}
void LandmarkData_LandmarkObservation::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
#if LANG_CXX11
void LandmarkData_LandmarkObservation::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
#endif
void LandmarkData_LandmarkObservation::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
void LandmarkData_LandmarkObservation::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}
::std::string* LandmarkData_LandmarkObservation::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LandmarkData_LandmarkObservation::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LandmarkData_LandmarkObservation::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.id)
}

// .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
bool LandmarkData_LandmarkObservation::has_landmark_to_tracking_transform() const {
  return this != internal_default_instance() && landmark_to_tracking_transform_ != NULL;
}
void LandmarkData_LandmarkObservation::clear_landmark_to_tracking_transform() {
  if (GetArenaNoVirtual() == NULL && landmark_to_tracking_transform_ != NULL) delete landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& LandmarkData_LandmarkObservation::landmark_to_tracking_transform() const {
  const ::csmlio::transform::proto::Rigid3d* p = landmark_to_tracking_transform_;
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::mutable_landmark_to_tracking_transform() {
  
  if (landmark_to_tracking_transform_ == NULL) {
    landmark_to_tracking_transform_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  return landmark_to_tracking_transform_;
}
::csmlio::transform::proto::Rigid3d* LandmarkData_LandmarkObservation::release_landmark_to_tracking_transform() {
  // @@protoc_insertion_point(field_release:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
  
  ::csmlio::transform::proto::Rigid3d* temp = landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = NULL;
  return temp;
}
void LandmarkData_LandmarkObservation::set_allocated_landmark_to_tracking_transform(::csmlio::transform::proto::Rigid3d* landmark_to_tracking_transform) {
  delete landmark_to_tracking_transform_;
  landmark_to_tracking_transform_ = landmark_to_tracking_transform;
  if (landmark_to_tracking_transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.sensor.proto.LandmarkData.LandmarkObservation.landmark_to_tracking_transform)
}

// double translation_weight = 3;
void LandmarkData_LandmarkObservation::clear_translation_weight() {
  translation_weight_ = 0;
}
double LandmarkData_LandmarkObservation::translation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.translation_weight)
  return translation_weight_;
}
void LandmarkData_LandmarkObservation::set_translation_weight(double value) {
  
  translation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.translation_weight)
}

// double rotation_weight = 4;
void LandmarkData_LandmarkObservation::clear_rotation_weight() {
  rotation_weight_ = 0;
}
double LandmarkData_LandmarkObservation::rotation_weight() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.LandmarkObservation.rotation_weight)
  return rotation_weight_;
}
void LandmarkData_LandmarkObservation::set_rotation_weight(double value) {
  
  rotation_weight_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.LandmarkObservation.rotation_weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData::kTimestampFieldNumber;
const int LandmarkData::kLandmarkObservationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData::LandmarkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData)
}
LandmarkData::LandmarkData(const LandmarkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      landmark_observations_(from.landmark_observations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
}

void LandmarkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandmarkData::descriptor() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkData& LandmarkData::default_instance() {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::InitDefaults();
  return *internal_default_instance();
}

LandmarkData* LandmarkData::New(::google::protobuf::Arena* arena) const {
  LandmarkData* n = new LandmarkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_observations_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool LandmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmark_observations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData)
  return false;
#undef DO_
}

void LandmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_observations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->landmark_observations(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData)
}

::google::protobuf::uint8* LandmarkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_observations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->landmark_observations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData)
  return target;
}

size_t LandmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_observations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmark_observations(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandmarkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_observations_.MergeFrom(from.landmark_observations_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LandmarkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {
  return true;
}

void LandmarkData::Swap(LandmarkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData::InternalSwap(LandmarkData* other) {
  using std::swap;
  landmark_observations_.InternalSwap(&other->landmark_observations_);
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LandmarkData::GetMetadata() const {
  protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fsensor_2fproto_2fsensor_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LandmarkData

// int64 timestamp = 1;
void LandmarkData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LandmarkData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.timestamp)
  return timestamp_;
}
void LandmarkData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.sensor.proto.LandmarkData.timestamp)
}

// repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
int LandmarkData::landmark_observations_size() const {
  return landmark_observations_.size();
}
void LandmarkData::clear_landmark_observations() {
  landmark_observations_.Clear();
}
const ::csmlio::sensor::proto::LandmarkData_LandmarkObservation& LandmarkData::landmark_observations(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Get(index);
}
::csmlio::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::mutable_landmark_observations(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Mutable(index);
}
::csmlio::sensor::proto::LandmarkData_LandmarkObservation* LandmarkData::add_landmark_observations() {
  // @@protoc_insertion_point(field_add:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::LandmarkData_LandmarkObservation >*
LandmarkData::mutable_landmark_observations() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return &landmark_observations_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::sensor::proto::LandmarkData_LandmarkObservation >&
LandmarkData::landmark_observations() const {
  // @@protoc_insertion_point(field_list:cartographer.sensor.proto.LandmarkData.landmark_observations)
  return landmark_observations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace sensor
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)
