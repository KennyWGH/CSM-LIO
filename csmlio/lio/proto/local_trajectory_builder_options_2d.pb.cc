// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/local_trajectory_builder_options_2d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmlio/lio/proto/local_trajectory_builder_options_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmlio {
namespace mapping {
namespace proto {
class LocalTrajectoryBuilderOptions2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions2D>
     _instance;
} _LocalTrajectoryBuilderOptions2D_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, min_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, max_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, min_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, max_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, missing_data_ray_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, num_accumulated_range_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, voxel_filter_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, loop_closure_adaptive_voxel_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, use_online_correlative_scan_matching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, real_time_correlative_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, ceres_scan_matcher_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, motion_filter_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, imu_gravity_time_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, pose_extrapolator_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, submaps_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalTrajectoryBuilderOptions2D, use_imu_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(LocalTrajectoryBuilderOptions2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LocalTrajectoryBuilderOptions2D_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/local_trajectory_builder_options_2d.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::InitDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::InitDefaults();
  ::csmlio::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::InitDefaults();
  ::csmlio::mapping::scan_matching::proto::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto::InitDefaults();
  ::csmlio::mapping::scan_matching::proto::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::InitDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto::InitDefaults();
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LocalTrajectoryBuilderOptions2D_default_instance_);_LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->adaptive_voxel_filter_options_ = const_cast< ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->loop_closure_adaptive_voxel_filter_options_ = const_cast< ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->real_time_correlative_scan_matcher_options_ = const_cast< ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D*>(
      ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D::internal_default_instance());
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->motion_filter_options_ = const_cast< ::csmlio::mapping::proto::MotionFilterOptions*>(
      ::csmlio::mapping::proto::MotionFilterOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->pose_extrapolator_options_ = const_cast< ::csmlio::mapping::proto::PoseExtrapolatorOptions*>(
      ::csmlio::mapping::proto::PoseExtrapolatorOptions::internal_default_instance());
  _LocalTrajectoryBuilderOptions2D_default_instance_._instance.get_mutable()->submaps_options_ = const_cast< ::csmlio::mapping::proto::SubmapsOptions2D*>(
      ::csmlio::mapping::proto::SubmapsOptions2D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\nDcartographer/mapping/proto/local_traje"
      "ctory_builder_options_2d.proto\022\032cartogra"
      "pher.mapping.proto\0326cartographer/mapping"
      "/proto/motion_filter_options.proto\032:cart"
      "ographer/mapping/proto/pose_extrapolator"
      "_options.proto\032=cartographer/sensor/prot"
      "o/adaptive_voxel_filter_options.proto\032Lc"
      "artographer/mapping/proto/scan_matching/"
      "ceres_scan_matcher_options_2d.proto\032Ycar"
      "tographer/mapping/proto/scan_matching/re"
      "al_time_correlative_scan_matcher_options"
      ".proto\0323cartographer/mapping/proto/subma"
      "ps_options_2d.proto\"\323\007\n\037LocalTrajectoryB"
      "uilderOptions2D\022\021\n\tmin_range\030\016 \001(\002\022\021\n\tma"
      "x_range\030\017 \001(\002\022\r\n\005min_z\030\001 \001(\002\022\r\n\005max_z\030\002 "
      "\001(\002\022\037\n\027missing_data_ray_length\030\020 \001(\002\022\"\n\032"
      "num_accumulated_range_data\030\023 \001(\005\022\031\n\021voxe"
      "l_filter_size\030\003 \001(\002\022\\\n\035adaptive_voxel_fi"
      "lter_options\030\006 \001(\01325.cartographer.sensor"
      ".proto.AdaptiveVoxelFilterOptions\022i\n*loo"
      "p_closure_adaptive_voxel_filter_options\030"
      "\024 \001(\01325.cartographer.sensor.proto.Adapti"
      "veVoxelFilterOptions\022,\n$use_online_corre"
      "lative_scan_matching\030\005 \001(\010\022\203\001\n*real_time"
      "_correlative_scan_matcher_options\030\007 \001(\0132"
      "O.cartographer.mapping.scan_matching.pro"
      "to.RealTimeCorrelativeScanMatcherOptions"
      "\022g\n\032ceres_scan_matcher_options\030\010 \001(\0132C.c"
      "artographer.mapping.scan_matching.proto."
      "CeresScanMatcherOptions2D\022N\n\025motion_filt"
      "er_options\030\r \001(\0132/.cartographer.mapping."
      "proto.MotionFilterOptions\022!\n\031imu_gravity"
      "_time_constant\030\021 \001(\001\022V\n\031pose_extrapolato"
      "r_options\030\025 \001(\01323.cartographer.mapping.p"
      "roto.PoseExtrapolatorOptions\022E\n\017submaps_"
      "options\030\013 \001(\0132,.cartographer.mapping.pro"
      "to.SubmapsOptions2D\022\024\n\014use_imu_data\030\014 \001("
      "\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1489);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/local_trajectory_builder_options_2d.proto", &protobuf_RegisterTypes);
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::AddDescriptors();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fpose_5fextrapolator_5foptions_2eproto::AddDescriptors();
  ::csmlio::sensor::proto::protobuf_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto::AddDescriptors();
  ::csmlio::mapping::scan_matching::proto::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f2d_2eproto::AddDescriptors();
  ::csmlio::mapping::scan_matching::proto::protobuf_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto::AddDescriptors();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fsubmaps_5foptions_5f2d_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalTrajectoryBuilderOptions2D::kMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMinZFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMaxZFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMissingDataRayLengthFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kNumAccumulatedRangeDataFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kLoopClosureAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kImuGravityTimeConstantFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kPoseExtrapolatorOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kSubmapsOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions2D::kUseImuDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}
LocalTrajectoryBuilderOptions2D::LocalTrajectoryBuilderOptions2D(const LocalTrajectoryBuilderOptions2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_adaptive_voxel_filter_options()) {
    adaptive_voxel_filter_options_ = new ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions(*from.adaptive_voxel_filter_options_);
  } else {
    adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    real_time_correlative_scan_matcher_options_ = new ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from.real_time_correlative_scan_matcher_options_);
  } else {
    real_time_correlative_scan_matcher_options_ = NULL;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = NULL;
  }
  if (from.has_submaps_options()) {
    submaps_options_ = new ::csmlio::mapping::proto::SubmapsOptions2D(*from.submaps_options_);
  } else {
    submaps_options_ = NULL;
  }
  if (from.has_motion_filter_options()) {
    motion_filter_options_ = new ::csmlio::mapping::proto::MotionFilterOptions(*from.motion_filter_options_);
  } else {
    motion_filter_options_ = NULL;
  }
  if (from.has_loop_closure_adaptive_voxel_filter_options()) {
    loop_closure_adaptive_voxel_filter_options_ = new ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions(*from.loop_closure_adaptive_voxel_filter_options_);
  } else {
    loop_closure_adaptive_voxel_filter_options_ = NULL;
  }
  if (from.has_pose_extrapolator_options()) {
    pose_extrapolator_options_ = new ::csmlio::mapping::proto::PoseExtrapolatorOptions(*from.pose_extrapolator_options_);
  } else {
    pose_extrapolator_options_ = NULL;
  }
  ::memcpy(&min_z_, &from.min_z_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_accumulated_range_data_) -
    reinterpret_cast<char*>(&min_z_)) + sizeof(num_accumulated_range_data_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

void LocalTrajectoryBuilderOptions2D::SharedCtor() {
  ::memset(&adaptive_voxel_filter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accumulated_range_data_) -
      reinterpret_cast<char*>(&adaptive_voxel_filter_options_)) + sizeof(num_accumulated_range_data_));
  _cached_size_ = 0;
}

LocalTrajectoryBuilderOptions2D::~LocalTrajectoryBuilderOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions2D::SharedDtor() {
  if (this != internal_default_instance()) delete adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete real_time_correlative_scan_matcher_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete submaps_options_;
  if (this != internal_default_instance()) delete motion_filter_options_;
  if (this != internal_default_instance()) delete loop_closure_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete pose_extrapolator_options_;
}

void LocalTrajectoryBuilderOptions2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalTrajectoryBuilderOptions2D::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalTrajectoryBuilderOptions2D& LocalTrajectoryBuilderOptions2D::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalTrajectoryBuilderOptions2D* LocalTrajectoryBuilderOptions2D::New(::google::protobuf::Arena* arena) const {
  LocalTrajectoryBuilderOptions2D* n = new LocalTrajectoryBuilderOptions2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalTrajectoryBuilderOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && adaptive_voxel_filter_options_ != NULL) {
    delete adaptive_voxel_filter_options_;
  }
  adaptive_voxel_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) {
    delete submaps_options_;
  }
  submaps_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && loop_closure_adaptive_voxel_filter_options_ != NULL) {
    delete loop_closure_adaptive_voxel_filter_options_;
  }
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_extrapolator_options_ != NULL) {
    delete pose_extrapolator_options_;
  }
  pose_extrapolator_options_ = NULL;
  ::memset(&min_z_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_accumulated_range_data_) -
      reinterpret_cast<char*>(&min_z_)) + sizeof(num_accumulated_range_data_));
  _internal_metadata_.Clear();
}

bool LocalTrajectoryBuilderOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_z = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float voxel_filter_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_filter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_online_correlative_scan_matching = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_imu_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_imu_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_range = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_range = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float missing_data_ray_length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &missing_data_ray_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double imu_gravity_time_constant = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_accumulated_range_data = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accumulated_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_closure_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_extrapolator_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return false;
#undef DO_
}

void LocalTrajectoryBuilderOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_z = 1;
  if (this->min_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_z(), output);
  }

  // float max_z = 2;
  if (this->max_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_z(), output);
  }

  // float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->voxel_filter_size(), output);
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_online_correlative_scan_matching(), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->adaptive_voxel_filter_options_, output);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->real_time_correlative_scan_matcher_options_, output);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ceres_scan_matcher_options_, output);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->submaps_options_, output);
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->use_imu_data(), output);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->motion_filter_options_, output);
  }

  // float min_range = 14;
  if (this->min_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->min_range(), output);
  }

  // float max_range = 15;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->max_range(), output);
  }

  // float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->missing_data_ray_length(), output);
  }

  // double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->imu_gravity_time_constant(), output);
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_accumulated_range_data(), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->loop_closure_adaptive_voxel_filter_options_, output);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->has_pose_extrapolator_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->pose_extrapolator_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_z = 1;
  if (this->min_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_z(), target);
  }

  // float max_z = 2;
  if (this->max_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_z(), target);
  }

  // float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->voxel_filter_size(), target);
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_online_correlative_scan_matching(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->adaptive_voxel_filter_options_, deterministic, target);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->real_time_correlative_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ceres_scan_matcher_options_, deterministic, target);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->submaps_options_, deterministic, target);
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->use_imu_data(), target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->motion_filter_options_, deterministic, target);
  }

  // float min_range = 14;
  if (this->min_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->min_range(), target);
  }

  // float max_range = 15;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->max_range(), target);
  }

  // float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->missing_data_ray_length(), target);
  }

  // double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->imu_gravity_time_constant(), target);
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_accumulated_range_data(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->loop_closure_adaptive_voxel_filter_options_, deterministic, target);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->has_pose_extrapolator_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->pose_extrapolator_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  return target;
}

size_t LocalTrajectoryBuilderOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
  if (this->has_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_time_correlative_scan_matcher_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
  if (this->has_submaps_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->submaps_options_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
  if (this->has_motion_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motion_filter_options_);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
  if (this->has_loop_closure_adaptive_voxel_filter_options()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->loop_closure_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
  if (this->has_pose_extrapolator_options()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_extrapolator_options_);
  }

  // float min_z = 1;
  if (this->min_z() != 0) {
    total_size += 1 + 4;
  }

  // float max_z = 2;
  if (this->max_z() != 0) {
    total_size += 1 + 4;
  }

  // float voxel_filter_size = 3;
  if (this->voxel_filter_size() != 0) {
    total_size += 1 + 4;
  }

  // bool use_online_correlative_scan_matching = 5;
  if (this->use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // bool use_imu_data = 12;
  if (this->use_imu_data() != 0) {
    total_size += 1 + 1;
  }

  // float min_range = 14;
  if (this->min_range() != 0) {
    total_size += 1 + 4;
  }

  // float max_range = 15;
  if (this->max_range() != 0) {
    total_size += 1 + 4;
  }

  // double imu_gravity_time_constant = 17;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 2 + 8;
  }

  // float missing_data_ray_length = 16;
  if (this->missing_data_ray_length() != 0) {
    total_size += 2 + 4;
  }

  // int32 num_accumulated_range_data = 19;
  if (this->num_accumulated_range_data() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_accumulated_range_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalTrajectoryBuilderOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalTrajectoryBuilderOptions2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions2D::MergeFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_adaptive_voxel_filter_options()) {
    mutable_adaptive_voxel_filter_options()->::csmlio::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.adaptive_voxel_filter_options());
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    mutable_real_time_correlative_scan_matcher_options()->::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
  }
  if (from.has_ceres_scan_matcher_options()) {
    mutable_ceres_scan_matcher_options()->::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D::MergeFrom(from.ceres_scan_matcher_options());
  }
  if (from.has_submaps_options()) {
    mutable_submaps_options()->::csmlio::mapping::proto::SubmapsOptions2D::MergeFrom(from.submaps_options());
  }
  if (from.has_motion_filter_options()) {
    mutable_motion_filter_options()->::csmlio::mapping::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
  }
  if (from.has_loop_closure_adaptive_voxel_filter_options()) {
    mutable_loop_closure_adaptive_voxel_filter_options()->::csmlio::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.loop_closure_adaptive_voxel_filter_options());
  }
  if (from.has_pose_extrapolator_options()) {
    mutable_pose_extrapolator_options()->::csmlio::mapping::proto::PoseExtrapolatorOptions::MergeFrom(from.pose_extrapolator_options());
  }
  if (from.min_z() != 0) {
    set_min_z(from.min_z());
  }
  if (from.max_z() != 0) {
    set_max_z(from.max_z());
  }
  if (from.voxel_filter_size() != 0) {
    set_voxel_filter_size(from.voxel_filter_size());
  }
  if (from.use_online_correlative_scan_matching() != 0) {
    set_use_online_correlative_scan_matching(from.use_online_correlative_scan_matching());
  }
  if (from.use_imu_data() != 0) {
    set_use_imu_data(from.use_imu_data());
  }
  if (from.min_range() != 0) {
    set_min_range(from.min_range());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.missing_data_ray_length() != 0) {
    set_missing_data_ray_length(from.missing_data_ray_length());
  }
  if (from.num_accumulated_range_data() != 0) {
    set_num_accumulated_range_data(from.num_accumulated_range_data());
  }
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions2D::CopyFrom(const LocalTrajectoryBuilderOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions2D::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions2D::Swap(LocalTrajectoryBuilderOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalTrajectoryBuilderOptions2D::InternalSwap(LocalTrajectoryBuilderOptions2D* other) {
  using std::swap;
  swap(adaptive_voxel_filter_options_, other->adaptive_voxel_filter_options_);
  swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(submaps_options_, other->submaps_options_);
  swap(motion_filter_options_, other->motion_filter_options_);
  swap(loop_closure_adaptive_voxel_filter_options_, other->loop_closure_adaptive_voxel_filter_options_);
  swap(pose_extrapolator_options_, other->pose_extrapolator_options_);
  swap(min_z_, other->min_z_);
  swap(max_z_, other->max_z_);
  swap(voxel_filter_size_, other->voxel_filter_size_);
  swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  swap(use_imu_data_, other->use_imu_data_);
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(missing_data_ray_length_, other->missing_data_ray_length_);
  swap(num_accumulated_range_data_, other->num_accumulated_range_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions2D::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalTrajectoryBuilderOptions2D

// float min_range = 14;
void LocalTrajectoryBuilderOptions2D::clear_min_range() {
  min_range_ = 0;
}
float LocalTrajectoryBuilderOptions2D::min_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_range)
  return min_range_;
}
void LocalTrajectoryBuilderOptions2D::set_min_range(float value) {
  
  min_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_range)
}

// float max_range = 15;
void LocalTrajectoryBuilderOptions2D::clear_max_range() {
  max_range_ = 0;
}
float LocalTrajectoryBuilderOptions2D::max_range() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_range)
  return max_range_;
}
void LocalTrajectoryBuilderOptions2D::set_max_range(float value) {
  
  max_range_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_range)
}

// float min_z = 1;
void LocalTrajectoryBuilderOptions2D::clear_min_z() {
  min_z_ = 0;
}
float LocalTrajectoryBuilderOptions2D::min_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_z)
  return min_z_;
}
void LocalTrajectoryBuilderOptions2D::set_min_z(float value) {
  
  min_z_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.min_z)
}

// float max_z = 2;
void LocalTrajectoryBuilderOptions2D::clear_max_z() {
  max_z_ = 0;
}
float LocalTrajectoryBuilderOptions2D::max_z() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_z)
  return max_z_;
}
void LocalTrajectoryBuilderOptions2D::set_max_z(float value) {
  
  max_z_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.max_z)
}

// float missing_data_ray_length = 16;
void LocalTrajectoryBuilderOptions2D::clear_missing_data_ray_length() {
  missing_data_ray_length_ = 0;
}
float LocalTrajectoryBuilderOptions2D::missing_data_ray_length() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.missing_data_ray_length)
  return missing_data_ray_length_;
}
void LocalTrajectoryBuilderOptions2D::set_missing_data_ray_length(float value) {
  
  missing_data_ray_length_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.missing_data_ray_length)
}

// int32 num_accumulated_range_data = 19;
void LocalTrajectoryBuilderOptions2D::clear_num_accumulated_range_data() {
  num_accumulated_range_data_ = 0;
}
::google::protobuf::int32 LocalTrajectoryBuilderOptions2D::num_accumulated_range_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.num_accumulated_range_data)
  return num_accumulated_range_data_;
}
void LocalTrajectoryBuilderOptions2D::set_num_accumulated_range_data(::google::protobuf::int32 value) {
  
  num_accumulated_range_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.num_accumulated_range_data)
}

// float voxel_filter_size = 3;
void LocalTrajectoryBuilderOptions2D::clear_voxel_filter_size() {
  voxel_filter_size_ = 0;
}
float LocalTrajectoryBuilderOptions2D::voxel_filter_size() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.voxel_filter_size)
  return voxel_filter_size_;
}
void LocalTrajectoryBuilderOptions2D::set_voxel_filter_size(float value) {
  
  voxel_filter_size_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.voxel_filter_size)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions adaptive_voxel_filter_options = 6;
bool LocalTrajectoryBuilderOptions2D::has_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && adaptive_voxel_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && adaptive_voxel_filter_options_ != NULL) delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
}
const ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::adaptive_voxel_filter_options() const {
  const ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* p = adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::csmlio::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_adaptive_voxel_filter_options() {
  
  if (adaptive_voxel_filter_options_ == NULL) {
    adaptive_voxel_filter_options_ = new ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  return adaptive_voxel_filter_options_;
}
::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::release_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
  
  ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* temp = adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_adaptive_voxel_filter_options(::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* adaptive_voxel_filter_options) {
  delete adaptive_voxel_filter_options_;
  adaptive_voxel_filter_options_ = adaptive_voxel_filter_options;
  if (adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.adaptive_voxel_filter_options)
}

// .cartographer.sensor.proto.AdaptiveVoxelFilterOptions loop_closure_adaptive_voxel_filter_options = 20;
bool LocalTrajectoryBuilderOptions2D::has_loop_closure_adaptive_voxel_filter_options() const {
  return this != internal_default_instance() && loop_closure_adaptive_voxel_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_loop_closure_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == NULL && loop_closure_adaptive_voxel_filter_options_ != NULL) delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
}
const ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions& LocalTrajectoryBuilderOptions2D::loop_closure_adaptive_voxel_filter_options() const {
  const ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* p = loop_closure_adaptive_voxel_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions*>(
      &::csmlio::sensor::proto::_AdaptiveVoxelFilterOptions_default_instance_);
}
::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_loop_closure_adaptive_voxel_filter_options() {
  
  if (loop_closure_adaptive_voxel_filter_options_ == NULL) {
    loop_closure_adaptive_voxel_filter_options_ = new ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  return loop_closure_adaptive_voxel_filter_options_;
}
::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* LocalTrajectoryBuilderOptions2D::release_loop_closure_adaptive_voxel_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
  
  ::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* temp = loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_loop_closure_adaptive_voxel_filter_options(::csmlio::sensor::proto::AdaptiveVoxelFilterOptions* loop_closure_adaptive_voxel_filter_options) {
  delete loop_closure_adaptive_voxel_filter_options_;
  loop_closure_adaptive_voxel_filter_options_ = loop_closure_adaptive_voxel_filter_options;
  if (loop_closure_adaptive_voxel_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.loop_closure_adaptive_voxel_filter_options)
}

// bool use_online_correlative_scan_matching = 5;
void LocalTrajectoryBuilderOptions2D::clear_use_online_correlative_scan_matching() {
  use_online_correlative_scan_matching_ = false;
}
bool LocalTrajectoryBuilderOptions2D::use_online_correlative_scan_matching() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_online_correlative_scan_matching)
  return use_online_correlative_scan_matching_;
}
void LocalTrajectoryBuilderOptions2D::set_use_online_correlative_scan_matching(bool value) {
  
  use_online_correlative_scan_matching_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_online_correlative_scan_matching)
}

// .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 7;
bool LocalTrajectoryBuilderOptions2D::has_real_time_correlative_scan_matcher_options() const {
  return this != internal_default_instance() && real_time_correlative_scan_matcher_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && real_time_correlative_scan_matcher_options_ != NULL) delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
}
const ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& LocalTrajectoryBuilderOptions2D::real_time_correlative_scan_matcher_options() const {
  const ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* p = real_time_correlative_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      &::csmlio::mapping::scan_matching::proto::_RealTimeCorrelativeScanMatcherOptions_default_instance_);
}
::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::mutable_real_time_correlative_scan_matcher_options() {
  
  if (real_time_correlative_scan_matcher_options_ == NULL) {
    real_time_correlative_scan_matcher_options_ = new ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  return real_time_correlative_scan_matcher_options_;
}
::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* LocalTrajectoryBuilderOptions2D::release_real_time_correlative_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
  
  ::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* temp = real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_real_time_correlative_scan_matcher_options(::csmlio::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions* real_time_correlative_scan_matcher_options) {
  delete real_time_correlative_scan_matcher_options_;
  real_time_correlative_scan_matcher_options_ = real_time_correlative_scan_matcher_options;
  if (real_time_correlative_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.real_time_correlative_scan_matcher_options)
}

// .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions2D ceres_scan_matcher_options = 8;
bool LocalTrajectoryBuilderOptions2D::has_ceres_scan_matcher_options() const {
  return this != internal_default_instance() && ceres_scan_matcher_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == NULL && ceres_scan_matcher_options_ != NULL) delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
}
const ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D& LocalTrajectoryBuilderOptions2D::ceres_scan_matcher_options() const {
  const ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D* p = ceres_scan_matcher_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D*>(
      &::csmlio::mapping::scan_matching::proto::_CeresScanMatcherOptions2D_default_instance_);
}
::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::mutable_ceres_scan_matcher_options() {
  
  if (ceres_scan_matcher_options_ == NULL) {
    ceres_scan_matcher_options_ = new ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  return ceres_scan_matcher_options_;
}
::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D* LocalTrajectoryBuilderOptions2D::release_ceres_scan_matcher_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
  
  ::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D* temp = ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_ceres_scan_matcher_options(::csmlio::mapping::scan_matching::proto::CeresScanMatcherOptions2D* ceres_scan_matcher_options) {
  delete ceres_scan_matcher_options_;
  ceres_scan_matcher_options_ = ceres_scan_matcher_options;
  if (ceres_scan_matcher_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.ceres_scan_matcher_options)
}

// .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 13;
bool LocalTrajectoryBuilderOptions2D::has_motion_filter_options() const {
  return this != internal_default_instance() && motion_filter_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == NULL && motion_filter_options_ != NULL) delete motion_filter_options_;
  motion_filter_options_ = NULL;
}
const ::csmlio::mapping::proto::MotionFilterOptions& LocalTrajectoryBuilderOptions2D::motion_filter_options() const {
  const ::csmlio::mapping::proto::MotionFilterOptions* p = motion_filter_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::MotionFilterOptions*>(
      &::csmlio::mapping::proto::_MotionFilterOptions_default_instance_);
}
::csmlio::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::mutable_motion_filter_options() {
  
  if (motion_filter_options_ == NULL) {
    motion_filter_options_ = new ::csmlio::mapping::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  return motion_filter_options_;
}
::csmlio::mapping::proto::MotionFilterOptions* LocalTrajectoryBuilderOptions2D::release_motion_filter_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
  
  ::csmlio::mapping::proto::MotionFilterOptions* temp = motion_filter_options_;
  motion_filter_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_motion_filter_options(::csmlio::mapping::proto::MotionFilterOptions* motion_filter_options) {
  delete motion_filter_options_;
  motion_filter_options_ = motion_filter_options;
  if (motion_filter_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.motion_filter_options)
}

// double imu_gravity_time_constant = 17;
void LocalTrajectoryBuilderOptions2D::clear_imu_gravity_time_constant() {
  imu_gravity_time_constant_ = 0;
}
double LocalTrajectoryBuilderOptions2D::imu_gravity_time_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.imu_gravity_time_constant)
  return imu_gravity_time_constant_;
}
void LocalTrajectoryBuilderOptions2D::set_imu_gravity_time_constant(double value) {
  
  imu_gravity_time_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.imu_gravity_time_constant)
}

// .cartographer.mapping.proto.PoseExtrapolatorOptions pose_extrapolator_options = 21;
bool LocalTrajectoryBuilderOptions2D::has_pose_extrapolator_options() const {
  return this != internal_default_instance() && pose_extrapolator_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_pose_extrapolator_options() {
  if (GetArenaNoVirtual() == NULL && pose_extrapolator_options_ != NULL) delete pose_extrapolator_options_;
  pose_extrapolator_options_ = NULL;
}
const ::csmlio::mapping::proto::PoseExtrapolatorOptions& LocalTrajectoryBuilderOptions2D::pose_extrapolator_options() const {
  const ::csmlio::mapping::proto::PoseExtrapolatorOptions* p = pose_extrapolator_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::PoseExtrapolatorOptions*>(
      &::csmlio::mapping::proto::_PoseExtrapolatorOptions_default_instance_);
}
::csmlio::mapping::proto::PoseExtrapolatorOptions* LocalTrajectoryBuilderOptions2D::mutable_pose_extrapolator_options() {
  
  if (pose_extrapolator_options_ == NULL) {
    pose_extrapolator_options_ = new ::csmlio::mapping::proto::PoseExtrapolatorOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
  return pose_extrapolator_options_;
}
::csmlio::mapping::proto::PoseExtrapolatorOptions* LocalTrajectoryBuilderOptions2D::release_pose_extrapolator_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
  
  ::csmlio::mapping::proto::PoseExtrapolatorOptions* temp = pose_extrapolator_options_;
  pose_extrapolator_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_pose_extrapolator_options(::csmlio::mapping::proto::PoseExtrapolatorOptions* pose_extrapolator_options) {
  delete pose_extrapolator_options_;
  pose_extrapolator_options_ = pose_extrapolator_options;
  if (pose_extrapolator_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.pose_extrapolator_options)
}

// .cartographer.mapping.proto.SubmapsOptions2D submaps_options = 11;
bool LocalTrajectoryBuilderOptions2D::has_submaps_options() const {
  return this != internal_default_instance() && submaps_options_ != NULL;
}
void LocalTrajectoryBuilderOptions2D::clear_submaps_options() {
  if (GetArenaNoVirtual() == NULL && submaps_options_ != NULL) delete submaps_options_;
  submaps_options_ = NULL;
}
const ::csmlio::mapping::proto::SubmapsOptions2D& LocalTrajectoryBuilderOptions2D::submaps_options() const {
  const ::csmlio::mapping::proto::SubmapsOptions2D* p = submaps_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::SubmapsOptions2D*>(
      &::csmlio::mapping::proto::_SubmapsOptions2D_default_instance_);
}
::csmlio::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::mutable_submaps_options() {
  
  if (submaps_options_ == NULL) {
    submaps_options_ = new ::csmlio::mapping::proto::SubmapsOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  return submaps_options_;
}
::csmlio::mapping::proto::SubmapsOptions2D* LocalTrajectoryBuilderOptions2D::release_submaps_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
  
  ::csmlio::mapping::proto::SubmapsOptions2D* temp = submaps_options_;
  submaps_options_ = NULL;
  return temp;
}
void LocalTrajectoryBuilderOptions2D::set_allocated_submaps_options(::csmlio::mapping::proto::SubmapsOptions2D* submaps_options) {
  delete submaps_options_;
  submaps_options_ = submaps_options;
  if (submaps_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.submaps_options)
}

// bool use_imu_data = 12;
void LocalTrajectoryBuilderOptions2D::clear_use_imu_data() {
  use_imu_data_ = false;
}
bool LocalTrajectoryBuilderOptions2D::use_imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_imu_data)
  return use_imu_data_;
}
void LocalTrajectoryBuilderOptions2D::set_use_imu_data(bool value) {
  
  use_imu_data_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D.use_imu_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)
