// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/serialization.proto

#ifndef PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED
#define PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "csmlio/lio/proto/pose_graph.pb.h"
#include "csmlio/lio/proto/submap.pb.h"
#include "csmlio/lio/proto/trajectory_node_data.pb.h"
#include "csmlio/sensor/proto/sensor.pb.h"
#include "csmlio/lio/proto/trajectory_builder_options.pb.h"
#include "csmlio/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
namespace csmlio {
namespace mapping {
namespace proto {
class FixedFramePoseData;
class FixedFramePoseDataDefaultTypeInternal;
extern FixedFramePoseDataDefaultTypeInternal _FixedFramePoseData_default_instance_;
class ImuData;
class ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class LandmarkData;
class LandmarkDataDefaultTypeInternal;
extern LandmarkDataDefaultTypeInternal _LandmarkData_default_instance_;
class LocalSlamResultData;
class LocalSlamResultDataDefaultTypeInternal;
extern LocalSlamResultDataDefaultTypeInternal _LocalSlamResultData_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class OdometryData;
class OdometryDataDefaultTypeInternal;
extern OdometryDataDefaultTypeInternal _OdometryData_default_instance_;
class SerializationHeader;
class SerializationHeaderDefaultTypeInternal;
extern SerializationHeaderDefaultTypeInternal _SerializationHeader_default_instance_;
class SerializedData;
class SerializedDataDefaultTypeInternal;
extern SerializedDataDefaultTypeInternal _SerializedData_default_instance_;
class Submap;
class SubmapDefaultTypeInternal;
extern SubmapDefaultTypeInternal _Submap_default_instance_;
class TrajectoryData;
class TrajectoryDataDefaultTypeInternal;
extern TrajectoryDataDefaultTypeInternal _TrajectoryData_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

namespace csmlio {
namespace mapping {
namespace proto {

namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto

// ===================================================================

class Submap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Submap) */ {
 public:
  Submap();
  virtual ~Submap();

  Submap(const Submap& from);

  inline Submap& operator=(const Submap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Submap(Submap&& from) noexcept
    : Submap() {
    *this = ::std::move(from);
  }

  inline Submap& operator=(Submap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Submap& default_instance();

  static inline const Submap* internal_default_instance() {
    return reinterpret_cast<const Submap*>(
               &_Submap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Submap* other);
  friend void swap(Submap& a, Submap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Submap* New() const PROTOBUF_FINAL { return New(NULL); }

  Submap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Submap& from);
  void MergeFrom(const Submap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Submap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  bool has_submap_id() const;
  void clear_submap_id();
  static const int kSubmapIdFieldNumber = 1;
  const ::csmlio::mapping::proto::SubmapId& submap_id() const;
  ::csmlio::mapping::proto::SubmapId* mutable_submap_id();
  ::csmlio::mapping::proto::SubmapId* release_submap_id();
  void set_allocated_submap_id(::csmlio::mapping::proto::SubmapId* submap_id);

  // .cartographer.mapping.proto.Submap2D submap_2d = 2;
  bool has_submap_2d() const;
  void clear_submap_2d();
  static const int kSubmap2DFieldNumber = 2;
  const ::csmlio::mapping::proto::Submap2D& submap_2d() const;
  ::csmlio::mapping::proto::Submap2D* mutable_submap_2d();
  ::csmlio::mapping::proto::Submap2D* release_submap_2d();
  void set_allocated_submap_2d(::csmlio::mapping::proto::Submap2D* submap_2d);

  // .cartographer.mapping.proto.Submap3D submap_3d = 3;
  bool has_submap_3d() const;
  void clear_submap_3d();
  static const int kSubmap3DFieldNumber = 3;
  const ::csmlio::mapping::proto::Submap3D& submap_3d() const;
  ::csmlio::mapping::proto::Submap3D* mutable_submap_3d();
  ::csmlio::mapping::proto::Submap3D* release_submap_3d();
  void set_allocated_submap_3d(::csmlio::mapping::proto::Submap3D* submap_3d);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Submap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::mapping::proto::SubmapId* submap_id_;
  ::csmlio::mapping::proto::Submap2D* submap_2d_;
  ::csmlio::mapping::proto::Submap3D* submap_3d_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.NodeId node_id = 1;
  bool has_node_id() const;
  void clear_node_id();
  static const int kNodeIdFieldNumber = 1;
  const ::csmlio::mapping::proto::NodeId& node_id() const;
  ::csmlio::mapping::proto::NodeId* mutable_node_id();
  ::csmlio::mapping::proto::NodeId* release_node_id();
  void set_allocated_node_id(::csmlio::mapping::proto::NodeId* node_id);

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
  bool has_node_data() const;
  void clear_node_data();
  static const int kNodeDataFieldNumber = 5;
  const ::csmlio::mapping::proto::TrajectoryNodeData& node_data() const;
  ::csmlio::mapping::proto::TrajectoryNodeData* mutable_node_data();
  ::csmlio::mapping::proto::TrajectoryNodeData* release_node_data();
  void set_allocated_node_data(::csmlio::mapping::proto::TrajectoryNodeData* node_data);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::mapping::proto::NodeId* node_id_;
  ::csmlio::mapping::proto::TrajectoryNodeData* node_data_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImuData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.ImuData) */ {
 public:
  ImuData();
  virtual ~ImuData();

  ImuData(const ImuData& from);

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(ImuData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImuData& default_instance();

  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ImuData* other);
  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImuData* New() const PROTOBUF_FINAL { return New(NULL); }

  ImuData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ImuData& from);
  void MergeFrom(const ImuData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ImuData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.ImuData imu_data = 2;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 2;
  const ::csmlio::sensor::proto::ImuData& imu_data() const;
  ::csmlio::sensor::proto::ImuData* mutable_imu_data();
  ::csmlio::sensor::proto::ImuData* release_imu_data();
  void set_allocated_imu_data(::csmlio::sensor::proto::ImuData* imu_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.ImuData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::sensor::proto::ImuData* imu_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OdometryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.OdometryData) */ {
 public:
  OdometryData();
  virtual ~OdometryData();

  OdometryData(const OdometryData& from);

  inline OdometryData& operator=(const OdometryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OdometryData(OdometryData&& from) noexcept
    : OdometryData() {
    *this = ::std::move(from);
  }

  inline OdometryData& operator=(OdometryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryData& default_instance();

  static inline const OdometryData* internal_default_instance() {
    return reinterpret_cast<const OdometryData*>(
               &_OdometryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(OdometryData* other);
  friend void swap(OdometryData& a, OdometryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OdometryData* New() const PROTOBUF_FINAL { return New(NULL); }

  OdometryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const OdometryData& from);
  void MergeFrom(const OdometryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(OdometryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.OdometryData odometry_data = 2;
  bool has_odometry_data() const;
  void clear_odometry_data();
  static const int kOdometryDataFieldNumber = 2;
  const ::csmlio::sensor::proto::OdometryData& odometry_data() const;
  ::csmlio::sensor::proto::OdometryData* mutable_odometry_data();
  ::csmlio::sensor::proto::OdometryData* release_odometry_data();
  void set_allocated_odometry_data(::csmlio::sensor::proto::OdometryData* odometry_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.OdometryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::sensor::proto::OdometryData* odometry_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FixedFramePoseData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.FixedFramePoseData) */ {
 public:
  FixedFramePoseData();
  virtual ~FixedFramePoseData();

  FixedFramePoseData(const FixedFramePoseData& from);

  inline FixedFramePoseData& operator=(const FixedFramePoseData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FixedFramePoseData(FixedFramePoseData&& from) noexcept
    : FixedFramePoseData() {
    *this = ::std::move(from);
  }

  inline FixedFramePoseData& operator=(FixedFramePoseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FixedFramePoseData& default_instance();

  static inline const FixedFramePoseData* internal_default_instance() {
    return reinterpret_cast<const FixedFramePoseData*>(
               &_FixedFramePoseData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FixedFramePoseData* other);
  friend void swap(FixedFramePoseData& a, FixedFramePoseData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FixedFramePoseData* New() const PROTOBUF_FINAL { return New(NULL); }

  FixedFramePoseData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FixedFramePoseData& from);
  void MergeFrom(const FixedFramePoseData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FixedFramePoseData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
  bool has_fixed_frame_pose_data() const;
  void clear_fixed_frame_pose_data();
  static const int kFixedFramePoseDataFieldNumber = 2;
  const ::csmlio::sensor::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  ::csmlio::sensor::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  ::csmlio::sensor::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::csmlio::sensor::proto::FixedFramePoseData* fixed_frame_pose_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.FixedFramePoseData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::sensor::proto::FixedFramePoseData* fixed_frame_pose_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LandmarkData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LandmarkData) */ {
 public:
  LandmarkData();
  virtual ~LandmarkData();

  LandmarkData(const LandmarkData& from);

  inline LandmarkData& operator=(const LandmarkData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LandmarkData(LandmarkData&& from) noexcept
    : LandmarkData() {
    *this = ::std::move(from);
  }

  inline LandmarkData& operator=(LandmarkData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LandmarkData& default_instance();

  static inline const LandmarkData* internal_default_instance() {
    return reinterpret_cast<const LandmarkData*>(
               &_LandmarkData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(LandmarkData* other);
  friend void swap(LandmarkData& a, LandmarkData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LandmarkData* New() const PROTOBUF_FINAL { return New(NULL); }

  LandmarkData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LandmarkData& from);
  void MergeFrom(const LandmarkData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LandmarkData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.sensor.proto.LandmarkData landmark_data = 2;
  bool has_landmark_data() const;
  void clear_landmark_data();
  static const int kLandmarkDataFieldNumber = 2;
  const ::csmlio::sensor::proto::LandmarkData& landmark_data() const;
  ::csmlio::sensor::proto::LandmarkData* mutable_landmark_data();
  ::csmlio::sensor::proto::LandmarkData* release_landmark_data();
  void set_allocated_landmark_data(::csmlio::sensor::proto::LandmarkData* landmark_data);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LandmarkData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::sensor::proto::LandmarkData* landmark_data_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrajectoryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.TrajectoryData) */ {
 public:
  TrajectoryData();
  virtual ~TrajectoryData();

  TrajectoryData(const TrajectoryData& from);

  inline TrajectoryData& operator=(const TrajectoryData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TrajectoryData(TrajectoryData&& from) noexcept
    : TrajectoryData() {
    *this = ::std::move(from);
  }

  inline TrajectoryData& operator=(TrajectoryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryData& default_instance();

  static inline const TrajectoryData* internal_default_instance() {
    return reinterpret_cast<const TrajectoryData*>(
               &_TrajectoryData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(TrajectoryData* other);
  friend void swap(TrajectoryData& a, TrajectoryData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryData* New() const PROTOBUF_FINAL { return New(NULL); }

  TrajectoryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrajectoryData& from);
  void MergeFrom(const TrajectoryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrajectoryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.transform.proto.Quaterniond imu_calibration = 3;
  bool has_imu_calibration() const;
  void clear_imu_calibration();
  static const int kImuCalibrationFieldNumber = 3;
  const ::csmlio::transform::proto::Quaterniond& imu_calibration() const;
  ::csmlio::transform::proto::Quaterniond* mutable_imu_calibration();
  ::csmlio::transform::proto::Quaterniond* release_imu_calibration();
  void set_allocated_imu_calibration(::csmlio::transform::proto::Quaterniond* imu_calibration);

  // .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
  bool has_fixed_frame_origin_in_map() const;
  void clear_fixed_frame_origin_in_map();
  static const int kFixedFrameOriginInMapFieldNumber = 4;
  const ::csmlio::transform::proto::Rigid3d& fixed_frame_origin_in_map() const;
  ::csmlio::transform::proto::Rigid3d* mutable_fixed_frame_origin_in_map();
  ::csmlio::transform::proto::Rigid3d* release_fixed_frame_origin_in_map();
  void set_allocated_fixed_frame_origin_in_map(::csmlio::transform::proto::Rigid3d* fixed_frame_origin_in_map);

  // double gravity_constant = 2;
  void clear_gravity_constant();
  static const int kGravityConstantFieldNumber = 2;
  double gravity_constant() const;
  void set_gravity_constant(double value);

  // int32 trajectory_id = 1;
  void clear_trajectory_id();
  static const int kTrajectoryIdFieldNumber = 1;
  ::google::protobuf::int32 trajectory_id() const;
  void set_trajectory_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.TrajectoryData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::csmlio::transform::proto::Quaterniond* imu_calibration_;
  ::csmlio::transform::proto::Rigid3d* fixed_frame_origin_in_map_;
  double gravity_constant_;
  ::google::protobuf::int32 trajectory_id_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocalSlamResultData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LocalSlamResultData) */ {
 public:
  LocalSlamResultData();
  virtual ~LocalSlamResultData();

  LocalSlamResultData(const LocalSlamResultData& from);

  inline LocalSlamResultData& operator=(const LocalSlamResultData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocalSlamResultData(LocalSlamResultData&& from) noexcept
    : LocalSlamResultData() {
    *this = ::std::move(from);
  }

  inline LocalSlamResultData& operator=(LocalSlamResultData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocalSlamResultData& default_instance();

  static inline const LocalSlamResultData* internal_default_instance() {
    return reinterpret_cast<const LocalSlamResultData*>(
               &_LocalSlamResultData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(LocalSlamResultData* other);
  friend void swap(LocalSlamResultData& a, LocalSlamResultData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocalSlamResultData* New() const PROTOBUF_FINAL { return New(NULL); }

  LocalSlamResultData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocalSlamResultData& from);
  void MergeFrom(const LocalSlamResultData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocalSlamResultData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cartographer.mapping.proto.Submap submaps = 3;
  int submaps_size() const;
  void clear_submaps();
  static const int kSubmapsFieldNumber = 3;
  const ::csmlio::mapping::proto::Submap& submaps(int index) const;
  ::csmlio::mapping::proto::Submap* mutable_submaps(int index);
  ::csmlio::mapping::proto::Submap* add_submaps();
  ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Submap >*
      mutable_submaps();
  const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Submap >&
      submaps() const;

  // .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
  bool has_node_data() const;
  void clear_node_data();
  static const int kNodeDataFieldNumber = 2;
  const ::csmlio::mapping::proto::TrajectoryNodeData& node_data() const;
  ::csmlio::mapping::proto::TrajectoryNodeData* mutable_node_data();
  ::csmlio::mapping::proto::TrajectoryNodeData* release_node_data();
  void set_allocated_node_data(::csmlio::mapping::proto::TrajectoryNodeData* node_data);

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LocalSlamResultData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Submap > submaps_;
  ::csmlio::mapping::proto::TrajectoryNodeData* node_data_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializationHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SerializationHeader) */ {
 public:
  SerializationHeader();
  virtual ~SerializationHeader();

  SerializationHeader(const SerializationHeader& from);

  inline SerializationHeader& operator=(const SerializationHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerializationHeader(SerializationHeader&& from) noexcept
    : SerializationHeader() {
    *this = ::std::move(from);
  }

  inline SerializationHeader& operator=(SerializationHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializationHeader& default_instance();

  static inline const SerializationHeader* internal_default_instance() {
    return reinterpret_cast<const SerializationHeader*>(
               &_SerializationHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(SerializationHeader* other);
  friend void swap(SerializationHeader& a, SerializationHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializationHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializationHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializationHeader& from);
  void MergeFrom(const SerializationHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializationHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 format_version = 1;
  void clear_format_version();
  static const int kFormatVersionFieldNumber = 1;
  ::google::protobuf::uint32 format_version() const;
  void set_format_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SerializationHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 format_version_;
  mutable int _cached_size_;
  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SerializedData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.SerializedData) */ {
 public:
  SerializedData();
  virtual ~SerializedData();

  SerializedData(const SerializedData& from);

  inline SerializedData& operator=(const SerializedData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SerializedData(SerializedData&& from) noexcept
    : SerializedData() {
    *this = ::std::move(from);
  }

  inline SerializedData& operator=(SerializedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SerializedData& default_instance();

  enum DataCase {
    kPoseGraph = 1,
    kAllTrajectoryBuilderOptions = 2,
    kSubmap = 3,
    kNode = 4,
    kTrajectoryData = 5,
    kImuData = 6,
    kOdometryData = 7,
    kFixedFramePoseData = 8,
    kLandmarkData = 9,
    DATA_NOT_SET = 0,
  };

  static inline const SerializedData* internal_default_instance() {
    return reinterpret_cast<const SerializedData*>(
               &_SerializedData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(SerializedData* other);
  friend void swap(SerializedData& a, SerializedData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SerializedData* New() const PROTOBUF_FINAL { return New(NULL); }

  SerializedData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SerializedData& from);
  void MergeFrom(const SerializedData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SerializedData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.mapping.proto.PoseGraph pose_graph = 1;
  bool has_pose_graph() const;
  void clear_pose_graph();
  static const int kPoseGraphFieldNumber = 1;
  const ::csmlio::mapping::proto::PoseGraph& pose_graph() const;
  ::csmlio::mapping::proto::PoseGraph* mutable_pose_graph();
  ::csmlio::mapping::proto::PoseGraph* release_pose_graph();
  void set_allocated_pose_graph(::csmlio::mapping::proto::PoseGraph* pose_graph);

  // .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
  bool has_all_trajectory_builder_options() const;
  void clear_all_trajectory_builder_options();
  static const int kAllTrajectoryBuilderOptionsFieldNumber = 2;
  const ::csmlio::mapping::proto::AllTrajectoryBuilderOptions& all_trajectory_builder_options() const;
  ::csmlio::mapping::proto::AllTrajectoryBuilderOptions* mutable_all_trajectory_builder_options();
  ::csmlio::mapping::proto::AllTrajectoryBuilderOptions* release_all_trajectory_builder_options();
  void set_allocated_all_trajectory_builder_options(::csmlio::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options);

  // .cartographer.mapping.proto.Submap submap = 3;
  bool has_submap() const;
  void clear_submap();
  static const int kSubmapFieldNumber = 3;
  const ::csmlio::mapping::proto::Submap& submap() const;
  ::csmlio::mapping::proto::Submap* mutable_submap();
  ::csmlio::mapping::proto::Submap* release_submap();
  void set_allocated_submap(::csmlio::mapping::proto::Submap* submap);

  // .cartographer.mapping.proto.Node node = 4;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 4;
  const ::csmlio::mapping::proto::Node& node() const;
  ::csmlio::mapping::proto::Node* mutable_node();
  ::csmlio::mapping::proto::Node* release_node();
  void set_allocated_node(::csmlio::mapping::proto::Node* node);

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
  bool has_trajectory_data() const;
  void clear_trajectory_data();
  static const int kTrajectoryDataFieldNumber = 5;
  const ::csmlio::mapping::proto::TrajectoryData& trajectory_data() const;
  ::csmlio::mapping::proto::TrajectoryData* mutable_trajectory_data();
  ::csmlio::mapping::proto::TrajectoryData* release_trajectory_data();
  void set_allocated_trajectory_data(::csmlio::mapping::proto::TrajectoryData* trajectory_data);

  // .cartographer.mapping.proto.ImuData imu_data = 6;
  bool has_imu_data() const;
  void clear_imu_data();
  static const int kImuDataFieldNumber = 6;
  const ::csmlio::mapping::proto::ImuData& imu_data() const;
  ::csmlio::mapping::proto::ImuData* mutable_imu_data();
  ::csmlio::mapping::proto::ImuData* release_imu_data();
  void set_allocated_imu_data(::csmlio::mapping::proto::ImuData* imu_data);

  // .cartographer.mapping.proto.OdometryData odometry_data = 7;
  bool has_odometry_data() const;
  void clear_odometry_data();
  static const int kOdometryDataFieldNumber = 7;
  const ::csmlio::mapping::proto::OdometryData& odometry_data() const;
  ::csmlio::mapping::proto::OdometryData* mutable_odometry_data();
  ::csmlio::mapping::proto::OdometryData* release_odometry_data();
  void set_allocated_odometry_data(::csmlio::mapping::proto::OdometryData* odometry_data);

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
  bool has_fixed_frame_pose_data() const;
  void clear_fixed_frame_pose_data();
  static const int kFixedFramePoseDataFieldNumber = 8;
  const ::csmlio::mapping::proto::FixedFramePoseData& fixed_frame_pose_data() const;
  ::csmlio::mapping::proto::FixedFramePoseData* mutable_fixed_frame_pose_data();
  ::csmlio::mapping::proto::FixedFramePoseData* release_fixed_frame_pose_data();
  void set_allocated_fixed_frame_pose_data(::csmlio::mapping::proto::FixedFramePoseData* fixed_frame_pose_data);

  // .cartographer.mapping.proto.LandmarkData landmark_data = 9;
  bool has_landmark_data() const;
  void clear_landmark_data();
  static const int kLandmarkDataFieldNumber = 9;
  const ::csmlio::mapping::proto::LandmarkData& landmark_data() const;
  ::csmlio::mapping::proto::LandmarkData* mutable_landmark_data();
  ::csmlio::mapping::proto::LandmarkData* release_landmark_data();
  void set_allocated_landmark_data(::csmlio::mapping::proto::LandmarkData* landmark_data);

  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.SerializedData)
 private:
  void set_has_pose_graph();
  void set_has_all_trajectory_builder_options();
  void set_has_submap();
  void set_has_node();
  void set_has_trajectory_data();
  void set_has_imu_data();
  void set_has_odometry_data();
  void set_has_fixed_frame_pose_data();
  void set_has_landmark_data();

  inline bool has_data() const;
  void clear_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::csmlio::mapping::proto::PoseGraph* pose_graph_;
    ::csmlio::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options_;
    ::csmlio::mapping::proto::Submap* submap_;
    ::csmlio::mapping::proto::Node* node_;
    ::csmlio::mapping::proto::TrajectoryData* trajectory_data_;
    ::csmlio::mapping::proto::ImuData* imu_data_;
    ::csmlio::mapping::proto::OdometryData* odometry_data_;
    ::csmlio::mapping::proto::FixedFramePoseData* fixed_frame_pose_data_;
    ::csmlio::mapping::proto::LandmarkData* landmark_data_;
  } data_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cartographer_2fmapping_2fproto_2fserialization_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Submap

// .cartographer.mapping.proto.SubmapId submap_id = 1;
inline bool Submap::has_submap_id() const {
  return this != internal_default_instance() && submap_id_ != NULL;
}
inline void Submap::clear_submap_id() {
  if (GetArenaNoVirtual() == NULL && submap_id_ != NULL) delete submap_id_;
  submap_id_ = NULL;
}
inline const ::csmlio::mapping::proto::SubmapId& Submap::submap_id() const {
  const ::csmlio::mapping::proto::SubmapId* p = submap_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_id)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::SubmapId*>(
      &::csmlio::mapping::proto::_SubmapId_default_instance_);
}
inline ::csmlio::mapping::proto::SubmapId* Submap::mutable_submap_id() {
  
  if (submap_id_ == NULL) {
    submap_id_ = new ::csmlio::mapping::proto::SubmapId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_id)
  return submap_id_;
}
inline ::csmlio::mapping::proto::SubmapId* Submap::release_submap_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_id)
  
  ::csmlio::mapping::proto::SubmapId* temp = submap_id_;
  submap_id_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_id(::csmlio::mapping::proto::SubmapId* submap_id) {
  delete submap_id_;
  submap_id_ = submap_id;
  if (submap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_id)
}

// .cartographer.mapping.proto.Submap2D submap_2d = 2;
inline bool Submap::has_submap_2d() const {
  return this != internal_default_instance() && submap_2d_ != NULL;
}
inline void Submap::clear_submap_2d() {
  if (GetArenaNoVirtual() == NULL && submap_2d_ != NULL) delete submap_2d_;
  submap_2d_ = NULL;
}
inline const ::csmlio::mapping::proto::Submap2D& Submap::submap_2d() const {
  const ::csmlio::mapping::proto::Submap2D* p = submap_2d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_2d)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::Submap2D*>(
      &::csmlio::mapping::proto::_Submap2D_default_instance_);
}
inline ::csmlio::mapping::proto::Submap2D* Submap::mutable_submap_2d() {
  
  if (submap_2d_ == NULL) {
    submap_2d_ = new ::csmlio::mapping::proto::Submap2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_2d)
  return submap_2d_;
}
inline ::csmlio::mapping::proto::Submap2D* Submap::release_submap_2d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_2d)
  
  ::csmlio::mapping::proto::Submap2D* temp = submap_2d_;
  submap_2d_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_2d(::csmlio::mapping::proto::Submap2D* submap_2d) {
  delete submap_2d_;
  submap_2d_ = submap_2d;
  if (submap_2d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_2d)
}

// .cartographer.mapping.proto.Submap3D submap_3d = 3;
inline bool Submap::has_submap_3d() const {
  return this != internal_default_instance() && submap_3d_ != NULL;
}
inline void Submap::clear_submap_3d() {
  if (GetArenaNoVirtual() == NULL && submap_3d_ != NULL) delete submap_3d_;
  submap_3d_ = NULL;
}
inline const ::csmlio::mapping::proto::Submap3D& Submap::submap_3d() const {
  const ::csmlio::mapping::proto::Submap3D* p = submap_3d_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Submap.submap_3d)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::Submap3D*>(
      &::csmlio::mapping::proto::_Submap3D_default_instance_);
}
inline ::csmlio::mapping::proto::Submap3D* Submap::mutable_submap_3d() {
  
  if (submap_3d_ == NULL) {
    submap_3d_ = new ::csmlio::mapping::proto::Submap3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Submap.submap_3d)
  return submap_3d_;
}
inline ::csmlio::mapping::proto::Submap3D* Submap::release_submap_3d() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Submap.submap_3d)
  
  ::csmlio::mapping::proto::Submap3D* temp = submap_3d_;
  submap_3d_ = NULL;
  return temp;
}
inline void Submap::set_allocated_submap_3d(::csmlio::mapping::proto::Submap3D* submap_3d) {
  delete submap_3d_;
  submap_3d_ = submap_3d;
  if (submap_3d) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Submap.submap_3d)
}

// -------------------------------------------------------------------

// Node

// .cartographer.mapping.proto.NodeId node_id = 1;
inline bool Node::has_node_id() const {
  return this != internal_default_instance() && node_id_ != NULL;
}
inline void Node::clear_node_id() {
  if (GetArenaNoVirtual() == NULL && node_id_ != NULL) delete node_id_;
  node_id_ = NULL;
}
inline const ::csmlio::mapping::proto::NodeId& Node::node_id() const {
  const ::csmlio::mapping::proto::NodeId* p = node_id_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_id)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::NodeId*>(
      &::csmlio::mapping::proto::_NodeId_default_instance_);
}
inline ::csmlio::mapping::proto::NodeId* Node::mutable_node_id() {
  
  if (node_id_ == NULL) {
    node_id_ = new ::csmlio::mapping::proto::NodeId;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_id)
  return node_id_;
}
inline ::csmlio::mapping::proto::NodeId* Node::release_node_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_id)
  
  ::csmlio::mapping::proto::NodeId* temp = node_id_;
  node_id_ = NULL;
  return temp;
}
inline void Node::set_allocated_node_id(::csmlio::mapping::proto::NodeId* node_id) {
  delete node_id_;
  node_id_ = node_id;
  if (node_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_id)
}

// .cartographer.mapping.proto.TrajectoryNodeData node_data = 5;
inline bool Node::has_node_data() const {
  return this != internal_default_instance() && node_data_ != NULL;
}
inline void Node::clear_node_data() {
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}
inline const ::csmlio::mapping::proto::TrajectoryNodeData& Node::node_data() const {
  const ::csmlio::mapping::proto::TrajectoryNodeData* p = node_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.Node.node_data)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::TrajectoryNodeData*>(
      &::csmlio::mapping::proto::_TrajectoryNodeData_default_instance_);
}
inline ::csmlio::mapping::proto::TrajectoryNodeData* Node::mutable_node_data() {
  
  if (node_data_ == NULL) {
    node_data_ = new ::csmlio::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.Node.node_data)
  return node_data_;
}
inline ::csmlio::mapping::proto::TrajectoryNodeData* Node::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.Node.node_data)
  
  ::csmlio::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
inline void Node::set_allocated_node_data(::csmlio::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Node.node_data)
}

// -------------------------------------------------------------------

// ImuData

// int32 trajectory_id = 1;
inline void ImuData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 ImuData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.trajectory_id)
  return trajectory_id_;
}
inline void ImuData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.ImuData.trajectory_id)
}

// .cartographer.sensor.proto.ImuData imu_data = 2;
inline bool ImuData::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != NULL;
}
inline void ImuData::clear_imu_data() {
  if (GetArenaNoVirtual() == NULL && imu_data_ != NULL) delete imu_data_;
  imu_data_ = NULL;
}
inline const ::csmlio::sensor::proto::ImuData& ImuData::imu_data() const {
  const ::csmlio::sensor::proto::ImuData* p = imu_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.ImuData.imu_data)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::sensor::proto::ImuData*>(
      &::csmlio::sensor::proto::_ImuData_default_instance_);
}
inline ::csmlio::sensor::proto::ImuData* ImuData::mutable_imu_data() {
  
  if (imu_data_ == NULL) {
    imu_data_ = new ::csmlio::sensor::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.ImuData.imu_data)
  return imu_data_;
}
inline ::csmlio::sensor::proto::ImuData* ImuData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.ImuData.imu_data)
  
  ::csmlio::sensor::proto::ImuData* temp = imu_data_;
  imu_data_ = NULL;
  return temp;
}
inline void ImuData::set_allocated_imu_data(::csmlio::sensor::proto::ImuData* imu_data) {
  delete imu_data_;
  imu_data_ = imu_data;
  if (imu_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.ImuData.imu_data)
}

// -------------------------------------------------------------------

// OdometryData

// int32 trajectory_id = 1;
inline void OdometryData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 OdometryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.trajectory_id)
  return trajectory_id_;
}
inline void OdometryData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.OdometryData.trajectory_id)
}

// .cartographer.sensor.proto.OdometryData odometry_data = 2;
inline bool OdometryData::has_odometry_data() const {
  return this != internal_default_instance() && odometry_data_ != NULL;
}
inline void OdometryData::clear_odometry_data() {
  if (GetArenaNoVirtual() == NULL && odometry_data_ != NULL) delete odometry_data_;
  odometry_data_ = NULL;
}
inline const ::csmlio::sensor::proto::OdometryData& OdometryData::odometry_data() const {
  const ::csmlio::sensor::proto::OdometryData* p = odometry_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.OdometryData.odometry_data)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::sensor::proto::OdometryData*>(
      &::csmlio::sensor::proto::_OdometryData_default_instance_);
}
inline ::csmlio::sensor::proto::OdometryData* OdometryData::mutable_odometry_data() {
  
  if (odometry_data_ == NULL) {
    odometry_data_ = new ::csmlio::sensor::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.OdometryData.odometry_data)
  return odometry_data_;
}
inline ::csmlio::sensor::proto::OdometryData* OdometryData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.OdometryData.odometry_data)
  
  ::csmlio::sensor::proto::OdometryData* temp = odometry_data_;
  odometry_data_ = NULL;
  return temp;
}
inline void OdometryData::set_allocated_odometry_data(::csmlio::sensor::proto::OdometryData* odometry_data) {
  delete odometry_data_;
  odometry_data_ = odometry_data;
  if (odometry_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.OdometryData.odometry_data)
}

// -------------------------------------------------------------------

// FixedFramePoseData

// int32 trajectory_id = 1;
inline void FixedFramePoseData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 FixedFramePoseData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
  return trajectory_id_;
}
inline void FixedFramePoseData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.FixedFramePoseData.trajectory_id)
}

// .cartographer.sensor.proto.FixedFramePoseData fixed_frame_pose_data = 2;
inline bool FixedFramePoseData::has_fixed_frame_pose_data() const {
  return this != internal_default_instance() && fixed_frame_pose_data_ != NULL;
}
inline void FixedFramePoseData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_pose_data_ != NULL) delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
}
inline const ::csmlio::sensor::proto::FixedFramePoseData& FixedFramePoseData::fixed_frame_pose_data() const {
  const ::csmlio::sensor::proto::FixedFramePoseData* p = fixed_frame_pose_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::sensor::proto::FixedFramePoseData*>(
      &::csmlio::sensor::proto::_FixedFramePoseData_default_instance_);
}
inline ::csmlio::sensor::proto::FixedFramePoseData* FixedFramePoseData::mutable_fixed_frame_pose_data() {
  
  if (fixed_frame_pose_data_ == NULL) {
    fixed_frame_pose_data_ = new ::csmlio::sensor::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  return fixed_frame_pose_data_;
}
inline ::csmlio::sensor::proto::FixedFramePoseData* FixedFramePoseData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
  
  ::csmlio::sensor::proto::FixedFramePoseData* temp = fixed_frame_pose_data_;
  fixed_frame_pose_data_ = NULL;
  return temp;
}
inline void FixedFramePoseData::set_allocated_fixed_frame_pose_data(::csmlio::sensor::proto::FixedFramePoseData* fixed_frame_pose_data) {
  delete fixed_frame_pose_data_;
  fixed_frame_pose_data_ = fixed_frame_pose_data;
  if (fixed_frame_pose_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.FixedFramePoseData.fixed_frame_pose_data)
}

// -------------------------------------------------------------------

// LandmarkData

// int32 trajectory_id = 1;
inline void LandmarkData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 LandmarkData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LandmarkData.trajectory_id)
  return trajectory_id_;
}
inline void LandmarkData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LandmarkData.trajectory_id)
}

// .cartographer.sensor.proto.LandmarkData landmark_data = 2;
inline bool LandmarkData::has_landmark_data() const {
  return this != internal_default_instance() && landmark_data_ != NULL;
}
inline void LandmarkData::clear_landmark_data() {
  if (GetArenaNoVirtual() == NULL && landmark_data_ != NULL) delete landmark_data_;
  landmark_data_ = NULL;
}
inline const ::csmlio::sensor::proto::LandmarkData& LandmarkData::landmark_data() const {
  const ::csmlio::sensor::proto::LandmarkData* p = landmark_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LandmarkData.landmark_data)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::sensor::proto::LandmarkData*>(
      &::csmlio::sensor::proto::_LandmarkData_default_instance_);
}
inline ::csmlio::sensor::proto::LandmarkData* LandmarkData::mutable_landmark_data() {
  
  if (landmark_data_ == NULL) {
    landmark_data_ = new ::csmlio::sensor::proto::LandmarkData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LandmarkData.landmark_data)
  return landmark_data_;
}
inline ::csmlio::sensor::proto::LandmarkData* LandmarkData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LandmarkData.landmark_data)
  
  ::csmlio::sensor::proto::LandmarkData* temp = landmark_data_;
  landmark_data_ = NULL;
  return temp;
}
inline void LandmarkData::set_allocated_landmark_data(::csmlio::sensor::proto::LandmarkData* landmark_data) {
  delete landmark_data_;
  landmark_data_ = landmark_data;
  if (landmark_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LandmarkData.landmark_data)
}

// -------------------------------------------------------------------

// TrajectoryData

// int32 trajectory_id = 1;
inline void TrajectoryData::clear_trajectory_id() {
  trajectory_id_ = 0;
}
inline ::google::protobuf::int32 TrajectoryData::trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.trajectory_id)
  return trajectory_id_;
}
inline void TrajectoryData::set_trajectory_id(::google::protobuf::int32 value) {
  
  trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryData.trajectory_id)
}

// double gravity_constant = 2;
inline void TrajectoryData::clear_gravity_constant() {
  gravity_constant_ = 0;
}
inline double TrajectoryData::gravity_constant() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.gravity_constant)
  return gravity_constant_;
}
inline void TrajectoryData::set_gravity_constant(double value) {
  
  gravity_constant_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryData.gravity_constant)
}

// .cartographer.transform.proto.Quaterniond imu_calibration = 3;
inline bool TrajectoryData::has_imu_calibration() const {
  return this != internal_default_instance() && imu_calibration_ != NULL;
}
inline void TrajectoryData::clear_imu_calibration() {
  if (GetArenaNoVirtual() == NULL && imu_calibration_ != NULL) delete imu_calibration_;
  imu_calibration_ = NULL;
}
inline const ::csmlio::transform::proto::Quaterniond& TrajectoryData::imu_calibration() const {
  const ::csmlio::transform::proto::Quaterniond* p = imu_calibration_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Quaterniond*>(
      &::csmlio::transform::proto::_Quaterniond_default_instance_);
}
inline ::csmlio::transform::proto::Quaterniond* TrajectoryData::mutable_imu_calibration() {
  
  if (imu_calibration_ == NULL) {
    imu_calibration_ = new ::csmlio::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  return imu_calibration_;
}
inline ::csmlio::transform::proto::Quaterniond* TrajectoryData::release_imu_calibration() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryData.imu_calibration)
  
  ::csmlio::transform::proto::Quaterniond* temp = imu_calibration_;
  imu_calibration_ = NULL;
  return temp;
}
inline void TrajectoryData::set_allocated_imu_calibration(::csmlio::transform::proto::Quaterniond* imu_calibration) {
  delete imu_calibration_;
  imu_calibration_ = imu_calibration;
  if (imu_calibration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryData.imu_calibration)
}

// .cartographer.transform.proto.Rigid3d fixed_frame_origin_in_map = 4;
inline bool TrajectoryData::has_fixed_frame_origin_in_map() const {
  return this != internal_default_instance() && fixed_frame_origin_in_map_ != NULL;
}
inline void TrajectoryData::clear_fixed_frame_origin_in_map() {
  if (GetArenaNoVirtual() == NULL && fixed_frame_origin_in_map_ != NULL) delete fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = NULL;
}
inline const ::csmlio::transform::proto::Rigid3d& TrajectoryData::fixed_frame_origin_in_map() const {
  const ::csmlio::transform::proto::Rigid3d* p = fixed_frame_origin_in_map_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
inline ::csmlio::transform::proto::Rigid3d* TrajectoryData::mutable_fixed_frame_origin_in_map() {
  
  if (fixed_frame_origin_in_map_ == NULL) {
    fixed_frame_origin_in_map_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  return fixed_frame_origin_in_map_;
}
inline ::csmlio::transform::proto::Rigid3d* TrajectoryData::release_fixed_frame_origin_in_map() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
  
  ::csmlio::transform::proto::Rigid3d* temp = fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = NULL;
  return temp;
}
inline void TrajectoryData::set_allocated_fixed_frame_origin_in_map(::csmlio::transform::proto::Rigid3d* fixed_frame_origin_in_map) {
  delete fixed_frame_origin_in_map_;
  fixed_frame_origin_in_map_ = fixed_frame_origin_in_map;
  if (fixed_frame_origin_in_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryData.fixed_frame_origin_in_map)
}

// -------------------------------------------------------------------

// LocalSlamResultData

// int64 timestamp = 1;
inline void LocalSlamResultData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LocalSlamResultData::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.timestamp)
  return timestamp_;
}
inline void LocalSlamResultData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LocalSlamResultData.timestamp)
}

// .cartographer.mapping.proto.TrajectoryNodeData node_data = 2;
inline bool LocalSlamResultData::has_node_data() const {
  return this != internal_default_instance() && node_data_ != NULL;
}
inline void LocalSlamResultData::clear_node_data() {
  if (GetArenaNoVirtual() == NULL && node_data_ != NULL) delete node_data_;
  node_data_ = NULL;
}
inline const ::csmlio::mapping::proto::TrajectoryNodeData& LocalSlamResultData::node_data() const {
  const ::csmlio::mapping::proto::TrajectoryNodeData* p = node_data_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.node_data)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::TrajectoryNodeData*>(
      &::csmlio::mapping::proto::_TrajectoryNodeData_default_instance_);
}
inline ::csmlio::mapping::proto::TrajectoryNodeData* LocalSlamResultData::mutable_node_data() {
  
  if (node_data_ == NULL) {
    node_data_ = new ::csmlio::mapping::proto::TrajectoryNodeData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalSlamResultData.node_data)
  return node_data_;
}
inline ::csmlio::mapping::proto::TrajectoryNodeData* LocalSlamResultData::release_node_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LocalSlamResultData.node_data)
  
  ::csmlio::mapping::proto::TrajectoryNodeData* temp = node_data_;
  node_data_ = NULL;
  return temp;
}
inline void LocalSlamResultData::set_allocated_node_data(::csmlio::mapping::proto::TrajectoryNodeData* node_data) {
  delete node_data_;
  node_data_ = node_data;
  if (node_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LocalSlamResultData.node_data)
}

// repeated .cartographer.mapping.proto.Submap submaps = 3;
inline int LocalSlamResultData::submaps_size() const {
  return submaps_.size();
}
inline void LocalSlamResultData::clear_submaps() {
  submaps_.Clear();
}
inline const ::csmlio::mapping::proto::Submap& LocalSlamResultData::submaps(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_.Get(index);
}
inline ::csmlio::mapping::proto::Submap* LocalSlamResultData::mutable_submaps(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_.Mutable(index);
}
inline ::csmlio::mapping::proto::Submap* LocalSlamResultData::add_submaps() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Submap >*
LocalSlamResultData::mutable_submaps() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return &submaps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::Submap >&
LocalSlamResultData::submaps() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.LocalSlamResultData.submaps)
  return submaps_;
}

// -------------------------------------------------------------------

// SerializationHeader

// uint32 format_version = 1;
inline void SerializationHeader::clear_format_version() {
  format_version_ = 0u;
}
inline ::google::protobuf::uint32 SerializationHeader::format_version() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializationHeader.format_version)
  return format_version_;
}
inline void SerializationHeader::set_format_version(::google::protobuf::uint32 value) {
  
  format_version_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SerializationHeader.format_version)
}

// -------------------------------------------------------------------

// SerializedData

// .cartographer.mapping.proto.PoseGraph pose_graph = 1;
inline bool SerializedData::has_pose_graph() const {
  return data_case() == kPoseGraph;
}
inline void SerializedData::set_has_pose_graph() {
  _oneof_case_[0] = kPoseGraph;
}
inline void SerializedData::clear_pose_graph() {
  if (has_pose_graph()) {
    delete data_.pose_graph_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::PoseGraph& SerializedData::pose_graph() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.pose_graph)
  return has_pose_graph()
      ? *data_.pose_graph_
      : ::csmlio::mapping::proto::PoseGraph::default_instance();
}
inline ::csmlio::mapping::proto::PoseGraph* SerializedData::mutable_pose_graph() {
  if (!has_pose_graph()) {
    clear_data();
    set_has_pose_graph();
    data_.pose_graph_ = new ::csmlio::mapping::proto::PoseGraph;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.pose_graph)
  return data_.pose_graph_;
}
inline ::csmlio::mapping::proto::PoseGraph* SerializedData::release_pose_graph() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.pose_graph)
  if (has_pose_graph()) {
    clear_has_data();
    ::csmlio::mapping::proto::PoseGraph* temp = data_.pose_graph_;
    data_.pose_graph_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_pose_graph(::csmlio::mapping::proto::PoseGraph* pose_graph) {
  clear_data();
  if (pose_graph) {
    set_has_pose_graph();
    data_.pose_graph_ = pose_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.pose_graph)
}

// .cartographer.mapping.proto.AllTrajectoryBuilderOptions all_trajectory_builder_options = 2;
inline bool SerializedData::has_all_trajectory_builder_options() const {
  return data_case() == kAllTrajectoryBuilderOptions;
}
inline void SerializedData::set_has_all_trajectory_builder_options() {
  _oneof_case_[0] = kAllTrajectoryBuilderOptions;
}
inline void SerializedData::clear_all_trajectory_builder_options() {
  if (has_all_trajectory_builder_options()) {
    delete data_.all_trajectory_builder_options_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::AllTrajectoryBuilderOptions& SerializedData::all_trajectory_builder_options() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  return has_all_trajectory_builder_options()
      ? *data_.all_trajectory_builder_options_
      : ::csmlio::mapping::proto::AllTrajectoryBuilderOptions::default_instance();
}
inline ::csmlio::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::mutable_all_trajectory_builder_options() {
  if (!has_all_trajectory_builder_options()) {
    clear_data();
    set_has_all_trajectory_builder_options();
    data_.all_trajectory_builder_options_ = new ::csmlio::mapping::proto::AllTrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  return data_.all_trajectory_builder_options_;
}
inline ::csmlio::mapping::proto::AllTrajectoryBuilderOptions* SerializedData::release_all_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
  if (has_all_trajectory_builder_options()) {
    clear_has_data();
    ::csmlio::mapping::proto::AllTrajectoryBuilderOptions* temp = data_.all_trajectory_builder_options_;
    data_.all_trajectory_builder_options_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_all_trajectory_builder_options(::csmlio::mapping::proto::AllTrajectoryBuilderOptions* all_trajectory_builder_options) {
  clear_data();
  if (all_trajectory_builder_options) {
    set_has_all_trajectory_builder_options();
    data_.all_trajectory_builder_options_ = all_trajectory_builder_options;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.all_trajectory_builder_options)
}

// .cartographer.mapping.proto.Submap submap = 3;
inline bool SerializedData::has_submap() const {
  return data_case() == kSubmap;
}
inline void SerializedData::set_has_submap() {
  _oneof_case_[0] = kSubmap;
}
inline void SerializedData::clear_submap() {
  if (has_submap()) {
    delete data_.submap_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::Submap& SerializedData::submap() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.submap)
  return has_submap()
      ? *data_.submap_
      : ::csmlio::mapping::proto::Submap::default_instance();
}
inline ::csmlio::mapping::proto::Submap* SerializedData::mutable_submap() {
  if (!has_submap()) {
    clear_data();
    set_has_submap();
    data_.submap_ = new ::csmlio::mapping::proto::Submap;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.submap)
  return data_.submap_;
}
inline ::csmlio::mapping::proto::Submap* SerializedData::release_submap() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.submap)
  if (has_submap()) {
    clear_has_data();
    ::csmlio::mapping::proto::Submap* temp = data_.submap_;
    data_.submap_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_submap(::csmlio::mapping::proto::Submap* submap) {
  clear_data();
  if (submap) {
    set_has_submap();
    data_.submap_ = submap;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.submap)
}

// .cartographer.mapping.proto.Node node = 4;
inline bool SerializedData::has_node() const {
  return data_case() == kNode;
}
inline void SerializedData::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void SerializedData::clear_node() {
  if (has_node()) {
    delete data_.node_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::Node& SerializedData::node() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.node)
  return has_node()
      ? *data_.node_
      : ::csmlio::mapping::proto::Node::default_instance();
}
inline ::csmlio::mapping::proto::Node* SerializedData::mutable_node() {
  if (!has_node()) {
    clear_data();
    set_has_node();
    data_.node_ = new ::csmlio::mapping::proto::Node;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.node)
  return data_.node_;
}
inline ::csmlio::mapping::proto::Node* SerializedData::release_node() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.node)
  if (has_node()) {
    clear_has_data();
    ::csmlio::mapping::proto::Node* temp = data_.node_;
    data_.node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_node(::csmlio::mapping::proto::Node* node) {
  clear_data();
  if (node) {
    set_has_node();
    data_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.node)
}

// .cartographer.mapping.proto.TrajectoryData trajectory_data = 5;
inline bool SerializedData::has_trajectory_data() const {
  return data_case() == kTrajectoryData;
}
inline void SerializedData::set_has_trajectory_data() {
  _oneof_case_[0] = kTrajectoryData;
}
inline void SerializedData::clear_trajectory_data() {
  if (has_trajectory_data()) {
    delete data_.trajectory_data_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::TrajectoryData& SerializedData::trajectory_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.trajectory_data)
  return has_trajectory_data()
      ? *data_.trajectory_data_
      : ::csmlio::mapping::proto::TrajectoryData::default_instance();
}
inline ::csmlio::mapping::proto::TrajectoryData* SerializedData::mutable_trajectory_data() {
  if (!has_trajectory_data()) {
    clear_data();
    set_has_trajectory_data();
    data_.trajectory_data_ = new ::csmlio::mapping::proto::TrajectoryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.trajectory_data)
  return data_.trajectory_data_;
}
inline ::csmlio::mapping::proto::TrajectoryData* SerializedData::release_trajectory_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.trajectory_data)
  if (has_trajectory_data()) {
    clear_has_data();
    ::csmlio::mapping::proto::TrajectoryData* temp = data_.trajectory_data_;
    data_.trajectory_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_trajectory_data(::csmlio::mapping::proto::TrajectoryData* trajectory_data) {
  clear_data();
  if (trajectory_data) {
    set_has_trajectory_data();
    data_.trajectory_data_ = trajectory_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.trajectory_data)
}

// .cartographer.mapping.proto.ImuData imu_data = 6;
inline bool SerializedData::has_imu_data() const {
  return data_case() == kImuData;
}
inline void SerializedData::set_has_imu_data() {
  _oneof_case_[0] = kImuData;
}
inline void SerializedData::clear_imu_data() {
  if (has_imu_data()) {
    delete data_.imu_data_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::ImuData& SerializedData::imu_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.imu_data)
  return has_imu_data()
      ? *data_.imu_data_
      : ::csmlio::mapping::proto::ImuData::default_instance();
}
inline ::csmlio::mapping::proto::ImuData* SerializedData::mutable_imu_data() {
  if (!has_imu_data()) {
    clear_data();
    set_has_imu_data();
    data_.imu_data_ = new ::csmlio::mapping::proto::ImuData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.imu_data)
  return data_.imu_data_;
}
inline ::csmlio::mapping::proto::ImuData* SerializedData::release_imu_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.imu_data)
  if (has_imu_data()) {
    clear_has_data();
    ::csmlio::mapping::proto::ImuData* temp = data_.imu_data_;
    data_.imu_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_imu_data(::csmlio::mapping::proto::ImuData* imu_data) {
  clear_data();
  if (imu_data) {
    set_has_imu_data();
    data_.imu_data_ = imu_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.imu_data)
}

// .cartographer.mapping.proto.OdometryData odometry_data = 7;
inline bool SerializedData::has_odometry_data() const {
  return data_case() == kOdometryData;
}
inline void SerializedData::set_has_odometry_data() {
  _oneof_case_[0] = kOdometryData;
}
inline void SerializedData::clear_odometry_data() {
  if (has_odometry_data()) {
    delete data_.odometry_data_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::OdometryData& SerializedData::odometry_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.odometry_data)
  return has_odometry_data()
      ? *data_.odometry_data_
      : ::csmlio::mapping::proto::OdometryData::default_instance();
}
inline ::csmlio::mapping::proto::OdometryData* SerializedData::mutable_odometry_data() {
  if (!has_odometry_data()) {
    clear_data();
    set_has_odometry_data();
    data_.odometry_data_ = new ::csmlio::mapping::proto::OdometryData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.odometry_data)
  return data_.odometry_data_;
}
inline ::csmlio::mapping::proto::OdometryData* SerializedData::release_odometry_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.odometry_data)
  if (has_odometry_data()) {
    clear_has_data();
    ::csmlio::mapping::proto::OdometryData* temp = data_.odometry_data_;
    data_.odometry_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_odometry_data(::csmlio::mapping::proto::OdometryData* odometry_data) {
  clear_data();
  if (odometry_data) {
    set_has_odometry_data();
    data_.odometry_data_ = odometry_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.odometry_data)
}

// .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 8;
inline bool SerializedData::has_fixed_frame_pose_data() const {
  return data_case() == kFixedFramePoseData;
}
inline void SerializedData::set_has_fixed_frame_pose_data() {
  _oneof_case_[0] = kFixedFramePoseData;
}
inline void SerializedData::clear_fixed_frame_pose_data() {
  if (has_fixed_frame_pose_data()) {
    delete data_.fixed_frame_pose_data_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::FixedFramePoseData& SerializedData::fixed_frame_pose_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return has_fixed_frame_pose_data()
      ? *data_.fixed_frame_pose_data_
      : ::csmlio::mapping::proto::FixedFramePoseData::default_instance();
}
inline ::csmlio::mapping::proto::FixedFramePoseData* SerializedData::mutable_fixed_frame_pose_data() {
  if (!has_fixed_frame_pose_data()) {
    clear_data();
    set_has_fixed_frame_pose_data();
    data_.fixed_frame_pose_data_ = new ::csmlio::mapping::proto::FixedFramePoseData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  return data_.fixed_frame_pose_data_;
}
inline ::csmlio::mapping::proto::FixedFramePoseData* SerializedData::release_fixed_frame_pose_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
  if (has_fixed_frame_pose_data()) {
    clear_has_data();
    ::csmlio::mapping::proto::FixedFramePoseData* temp = data_.fixed_frame_pose_data_;
    data_.fixed_frame_pose_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_fixed_frame_pose_data(::csmlio::mapping::proto::FixedFramePoseData* fixed_frame_pose_data) {
  clear_data();
  if (fixed_frame_pose_data) {
    set_has_fixed_frame_pose_data();
    data_.fixed_frame_pose_data_ = fixed_frame_pose_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.fixed_frame_pose_data)
}

// .cartographer.mapping.proto.LandmarkData landmark_data = 9;
inline bool SerializedData::has_landmark_data() const {
  return data_case() == kLandmarkData;
}
inline void SerializedData::set_has_landmark_data() {
  _oneof_case_[0] = kLandmarkData;
}
inline void SerializedData::clear_landmark_data() {
  if (has_landmark_data()) {
    delete data_.landmark_data_;
    clear_has_data();
  }
}
inline  const ::csmlio::mapping::proto::LandmarkData& SerializedData::landmark_data() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SerializedData.landmark_data)
  return has_landmark_data()
      ? *data_.landmark_data_
      : ::csmlio::mapping::proto::LandmarkData::default_instance();
}
inline ::csmlio::mapping::proto::LandmarkData* SerializedData::mutable_landmark_data() {
  if (!has_landmark_data()) {
    clear_data();
    set_has_landmark_data();
    data_.landmark_data_ = new ::csmlio::mapping::proto::LandmarkData;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SerializedData.landmark_data)
  return data_.landmark_data_;
}
inline ::csmlio::mapping::proto::LandmarkData* SerializedData::release_landmark_data() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SerializedData.landmark_data)
  if (has_landmark_data()) {
    clear_has_data();
    ::csmlio::mapping::proto::LandmarkData* temp = data_.landmark_data_;
    data_.landmark_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SerializedData::set_allocated_landmark_data(::csmlio::mapping::proto::LandmarkData* landmark_data) {
  clear_data();
  if (landmark_data) {
    set_has_landmark_data();
    data_.landmark_data_ = landmark_data;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SerializedData.landmark_data)
}

inline bool SerializedData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void SerializedData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline SerializedData::DataCase SerializedData::data_case() const {
  return SerializedData::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cartographer_2fmapping_2fproto_2fserialization_2eproto__INCLUDED
