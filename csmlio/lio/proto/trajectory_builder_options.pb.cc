// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "csmlio/lio/proto/trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace csmlio {
namespace mapping {
namespace proto {
class InitialTrajectoryPoseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InitialTrajectoryPose>
     _instance;
} _InitialTrajectoryPose_default_instance_;
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>
     _instance;
} _TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_;
class TrajectoryBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions>
     _instance;
} _TrajectoryBuilderOptions_default_instance_;
class SensorIdDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SensorId>
     _instance;
} _SensorId_default_instance_;
class TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptionsWithSensorIds>
     _instance;
} _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
class AllTrajectoryBuilderOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AllTrajectoryBuilderOptions>
     _instance;
} _AllTrajectoryBuilderOptions_default_instance_;

namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, relative_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, to_trajectory_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialTrajectoryPose, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, max_submaps_to_keep_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_2d_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, trajectory_builder_3d_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, initial_trajectory_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pure_localization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pure_localization_trimmer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, collate_fixed_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, collate_landmarks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptions, pose_graph_odometry_motion_filter_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SensorId, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, sensor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryBuilderOptionsWithSensorIds, trajectory_builder_options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTrajectoryBuilderOptions, options_with_sensor_ids_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(InitialTrajectoryPose)},
  { 8, -1, sizeof(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions)},
  { 14, -1, sizeof(TrajectoryBuilderOptions)},
  { 27, -1, sizeof(SensorId)},
  { 34, -1, sizeof(TrajectoryBuilderOptionsWithSensorIds)},
  { 41, -1, sizeof(AllTrajectoryBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitialTrajectoryPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryBuilderOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SensorId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrajectoryBuilderOptionsWithSensorIds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AllTrajectoryBuilderOptions_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cartographer/mapping/proto/trajectory_builder_options.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::InitDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::InitDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::InitDefaults();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::InitDefaults();
  _InitialTrajectoryPose_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InitialTrajectoryPose_default_instance_);_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_);_TrajectoryBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrajectoryBuilderOptions_default_instance_);_SensorId_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SensorId_default_instance_);_TrajectoryBuilderOptionsWithSensorIds_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TrajectoryBuilderOptionsWithSensorIds_default_instance_);_AllTrajectoryBuilderOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AllTrajectoryBuilderOptions_default_instance_);_InitialTrajectoryPose_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::csmlio::transform::proto::Rigid3d*>(
      ::csmlio::transform::proto::Rigid3d::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_2d_options_ = const_cast< ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D*>(
      ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_3d_options_ = const_cast< ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D*>(
      ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->initial_trajectory_pose_ = const_cast< ::csmlio::mapping::proto::InitialTrajectoryPose*>(
      ::csmlio::mapping::proto::InitialTrajectoryPose::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->pure_localization_trimmer_ = const_cast< ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(
      ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::internal_default_instance());
  _TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->pose_graph_odometry_motion_filter_ = const_cast< ::csmlio::mapping::proto::MotionFilterOptions*>(
      ::csmlio::mapping::proto::MotionFilterOptions::internal_default_instance());
  _TrajectoryBuilderOptionsWithSensorIds_default_instance_._instance.get_mutable()->trajectory_builder_options_ = const_cast< ::csmlio::mapping::proto::TrajectoryBuilderOptions*>(
      ::csmlio::mapping::proto::TrajectoryBuilderOptions::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n;cartographer/mapping/proto/trajectory_"
      "builder_options.proto\022\032cartographer.mapp"
      "ing.proto\032,cartographer/transform/proto/"
      "transform.proto\0326cartographer/mapping/pr"
      "oto/motion_filter_options.proto\032Dcartogr"
      "apher/mapping/proto/local_trajectory_bui"
      "lder_options_2d.proto\032Dcartographer/mapp"
      "ing/proto/local_trajectory_builder_optio"
      "ns_3d.proto\"\202\001\n\025InitialTrajectoryPose\022<\n"
      "\rrelative_pose\030\001 \001(\0132%.cartographer.tran"
      "sform.proto.Rigid3d\022\030\n\020to_trajectory_id\030"
      "\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003\"\246\005\n\030TrajectoryB"
      "uilderOptions\022b\n\035trajectory_builder_2d_o"
      "ptions\030\001 \001(\0132;.cartographer.mapping.prot"
      "o.LocalTrajectoryBuilderOptions2D\022b\n\035tra"
      "jectory_builder_3d_options\030\002 \001(\0132;.carto"
      "grapher.mapping.proto.LocalTrajectoryBui"
      "lderOptions3D\022R\n\027initial_trajectory_pose"
      "\030\004 \001(\01321.cartographer.mapping.proto.Init"
      "ialTrajectoryPose\022\035\n\021pure_localization\030\003"
      " \001(\010B\002\030\001\022v\n\031pure_localization_trimmer\030\006 "
      "\001(\0132S.cartographer.mapping.proto.Traject"
      "oryBuilderOptions.PureLocalizationTrimme"
      "rOptions\022\033\n\023collate_fixed_frame\030\007 \001(\010\022\031\n"
      "\021collate_landmarks\030\010 \001(\010\022Z\n!pose_graph_o"
      "dometry_motion_filter\030\t \001(\0132/.cartograph"
      "er.mapping.proto.MotionFilterOptions\032=\n\036"
      "PureLocalizationTrimmerOptions\022\033\n\023max_su"
      "bmaps_to_keep\030\001 \001(\005J\004\010\005\020\006\"\300\001\n\010SensorId\022="
      "\n\004type\030\001 \001(\0162/.cartographer.mapping.prot"
      "o.SensorId.SensorType\022\n\n\002id\030\002 \001(\t\"i\n\nSen"
      "sorType\022\t\n\005RANGE\020\000\022\007\n\003IMU\020\001\022\014\n\010ODOMETRY\020"
      "\002\022\024\n\020FIXED_FRAME_POSE\020\003\022\014\n\010LANDMARK\020\004\022\025\n"
      "\021LOCAL_SLAM_RESULT\020\005\"\272\001\n%TrajectoryBuild"
      "erOptionsWithSensorIds\0227\n\tsensor_id\030\001 \003("
      "\0132$.cartographer.mapping.proto.SensorId\022"
      "X\n\032trajectory_builder_options\030\002 \001(\01324.ca"
      "rtographer.mapping.proto.TrajectoryBuild"
      "erOptions\"\201\001\n\033AllTrajectoryBuilderOption"
      "s\022b\n\027options_with_sensor_ids\030\001 \003(\0132A.car"
      "tographer.mapping.proto.TrajectoryBuilde"
      "rOptionsWithSensorIdsb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_builder_options.proto", &protobuf_RegisterTypes);
  ::csmlio::transform::proto::protobuf_cartographer_2ftransform_2fproto_2ftransform_2eproto::AddDescriptors();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto::AddDescriptors();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto::AddDescriptors();
  ::csmlio::mapping::proto::protobuf_cartographer_2fmapping_2fproto_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto

const ::google::protobuf::EnumDescriptor* SensorId_SensorType_descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_enum_descriptors[0];
}
bool SensorId_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorId_SensorType SensorId::RANGE;
const SensorId_SensorType SensorId::IMU;
const SensorId_SensorType SensorId::ODOMETRY;
const SensorId_SensorType SensorId::FIXED_FRAME_POSE;
const SensorId_SensorType SensorId::LANDMARK;
const SensorId_SensorType SensorId::LOCAL_SLAM_RESULT;
const SensorId_SensorType SensorId::SensorType_MIN;
const SensorId_SensorType SensorId::SensorType_MAX;
const int SensorId::SensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitialTrajectoryPose::kRelativePoseFieldNumber;
const int InitialTrajectoryPose::kToTrajectoryIdFieldNumber;
const int InitialTrajectoryPose::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitialTrajectoryPose::InitialTrajectoryPose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}
InitialTrajectoryPose::InitialTrajectoryPose(const InitialTrajectoryPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_pose()) {
    relative_pose_ = new ::csmlio::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_trajectory_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}

void InitialTrajectoryPose::SharedCtor() {
  ::memset(&relative_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&relative_pose_)) + sizeof(to_trajectory_id_));
  _cached_size_ = 0;
}

InitialTrajectoryPose::~InitialTrajectoryPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.InitialTrajectoryPose)
  SharedDtor();
}

void InitialTrajectoryPose::SharedDtor() {
  if (this != internal_default_instance()) delete relative_pose_;
}

void InitialTrajectoryPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialTrajectoryPose::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitialTrajectoryPose& InitialTrajectoryPose::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitialTrajectoryPose* InitialTrajectoryPose::New(::google::protobuf::Arena* arena) const {
  InitialTrajectoryPose* n = new InitialTrajectoryPose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitialTrajectoryPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) {
    delete relative_pose_;
  }
  relative_pose_ = NULL;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  _internal_metadata_.Clear();
}

bool InitialTrajectoryPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.InitialTrajectoryPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d relative_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_trajectory_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.InitialTrajectoryPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.InitialTrajectoryPose)
  return false;
#undef DO_
}

void InitialTrajectoryPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->relative_pose_, output);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_trajectory_id(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.InitialTrajectoryPose)
}

::google::protobuf::uint8* InitialTrajectoryPose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->relative_pose_, deterministic, target);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_trajectory_id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.InitialTrajectoryPose)
  return target;
}

size_t InitialTrajectoryPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.InitialTrajectoryPose)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relative_pose_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialTrajectoryPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialTrajectoryPose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitialTrajectoryPose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.InitialTrajectoryPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.InitialTrajectoryPose)
    MergeFrom(*source);
  }
}

void InitialTrajectoryPose::MergeFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relative_pose()) {
    mutable_relative_pose()->::csmlio::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.to_trajectory_id() != 0) {
    set_to_trajectory_id(from.to_trajectory_id());
  }
}

void InitialTrajectoryPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialTrajectoryPose::CopyFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialTrajectoryPose::IsInitialized() const {
  return true;
}

void InitialTrajectoryPose::Swap(InitialTrajectoryPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitialTrajectoryPose::InternalSwap(InitialTrajectoryPose* other) {
  using std::swap;
  swap(relative_pose_, other->relative_pose_);
  swap(timestamp_, other->timestamp_);
  swap(to_trajectory_id_, other->to_trajectory_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitialTrajectoryPose::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitialTrajectoryPose

// .cartographer.transform.proto.Rigid3d relative_pose = 1;
bool InitialTrajectoryPose::has_relative_pose() const {
  return this != internal_default_instance() && relative_pose_ != NULL;
}
void InitialTrajectoryPose::clear_relative_pose() {
  if (GetArenaNoVirtual() == NULL && relative_pose_ != NULL) delete relative_pose_;
  relative_pose_ = NULL;
}
const ::csmlio::transform::proto::Rigid3d& InitialTrajectoryPose::relative_pose() const {
  const ::csmlio::transform::proto::Rigid3d* p = relative_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::transform::proto::Rigid3d*>(
      &::csmlio::transform::proto::_Rigid3d_default_instance_);
}
::csmlio::transform::proto::Rigid3d* InitialTrajectoryPose::mutable_relative_pose() {
  
  if (relative_pose_ == NULL) {
    relative_pose_ = new ::csmlio::transform::proto::Rigid3d;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  return relative_pose_;
}
::csmlio::transform::proto::Rigid3d* InitialTrajectoryPose::release_relative_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
  
  ::csmlio::transform::proto::Rigid3d* temp = relative_pose_;
  relative_pose_ = NULL;
  return temp;
}
void InitialTrajectoryPose::set_allocated_relative_pose(::csmlio::transform::proto::Rigid3d* relative_pose) {
  delete relative_pose_;
  relative_pose_ = relative_pose;
  if (relative_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.InitialTrajectoryPose.relative_pose)
}

// int32 to_trajectory_id = 2;
void InitialTrajectoryPose::clear_to_trajectory_id() {
  to_trajectory_id_ = 0;
}
::google::protobuf::int32 InitialTrajectoryPose::to_trajectory_id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
  return to_trajectory_id_;
}
void InitialTrajectoryPose::set_to_trajectory_id(::google::protobuf::int32 value) {
  
  to_trajectory_id_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.to_trajectory_id)
}

// int64 timestamp = 3;
void InitialTrajectoryPose::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 InitialTrajectoryPose::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
  return timestamp_;
}
void InitialTrajectoryPose::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.InitialTrajectoryPose.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::kMaxSubmapsToKeepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}
TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_submaps_to_keep_ = from.max_submaps_to_keep_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedCtor() {
  max_submaps_to_keep_ = 0;
  _cached_size_ = 0;
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::~TrajectoryBuilderOptions_PureLocalizationTrimmerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedDtor() {
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* n = new TrajectoryBuilderOptions_PureLocalizationTrimmerOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_submaps_to_keep_ = 0;
  _internal_metadata_.Clear();
}

bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_submaps_to_keep = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_submaps_to_keep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return false;
#undef DO_
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_submaps_to_keep(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_submaps_to_keep(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return target;
}

size_t TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_submaps_to_keep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_submaps_to_keep() != 0) {
    set_max_submaps_to_keep(from.max_submaps_to_keep());
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Swap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSwap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  using std::swap;
  swap(max_submaps_to_keep_, other->max_submaps_to_keep_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptions_PureLocalizationTrimmerOptions

// int32 max_submaps_to_keep = 1;
void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::clear_max_submaps_to_keep() {
  max_submaps_to_keep_ = 0;
}
::google::protobuf::int32 TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::max_submaps_to_keep() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions.max_submaps_to_keep)
  return max_submaps_to_keep_;
}
void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::set_max_submaps_to_keep(::google::protobuf::int32 value) {
  
  max_submaps_to_keep_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions.max_submaps_to_keep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions::kTrajectoryBuilder2DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kTrajectoryBuilder3DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kInitialTrajectoryPoseFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationTrimmerFieldNumber;
const int TrajectoryBuilderOptions::kCollateFixedFrameFieldNumber;
const int TrajectoryBuilderOptions::kCollateLandmarksFieldNumber;
const int TrajectoryBuilderOptions::kPoseGraphOdometryMotionFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions::TrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}
TrajectoryBuilderOptions::TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_builder_2d_options()) {
    trajectory_builder_2d_options_ = new ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D(*from.trajectory_builder_2d_options_);
  } else {
    trajectory_builder_2d_options_ = NULL;
  }
  if (from.has_trajectory_builder_3d_options()) {
    trajectory_builder_3d_options_ = new ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D(*from.trajectory_builder_3d_options_);
  } else {
    trajectory_builder_3d_options_ = NULL;
  }
  if (from.has_initial_trajectory_pose()) {
    initial_trajectory_pose_ = new ::csmlio::mapping::proto::InitialTrajectoryPose(*from.initial_trajectory_pose_);
  } else {
    initial_trajectory_pose_ = NULL;
  }
  if (from.has_pure_localization_trimmer()) {
    pure_localization_trimmer_ = new ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(*from.pure_localization_trimmer_);
  } else {
    pure_localization_trimmer_ = NULL;
  }
  if (from.has_pose_graph_odometry_motion_filter()) {
    pose_graph_odometry_motion_filter_ = new ::csmlio::mapping::proto::MotionFilterOptions(*from.pose_graph_odometry_motion_filter_);
  } else {
    pose_graph_odometry_motion_filter_ = NULL;
  }
  ::memcpy(&pure_localization_, &from.pure_localization_,
    static_cast<size_t>(reinterpret_cast<char*>(&collate_landmarks_) -
    reinterpret_cast<char*>(&pure_localization_)) + sizeof(collate_landmarks_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::SharedCtor() {
  ::memset(&trajectory_builder_2d_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collate_landmarks_) -
      reinterpret_cast<char*>(&trajectory_builder_2d_options_)) + sizeof(collate_landmarks_));
  _cached_size_ = 0;
}

TrajectoryBuilderOptions::~TrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_2d_options_;
  if (this != internal_default_instance()) delete trajectory_builder_3d_options_;
  if (this != internal_default_instance()) delete initial_trajectory_pose_;
  if (this != internal_default_instance()) delete pure_localization_trimmer_;
  if (this != internal_default_instance()) delete pose_graph_odometry_motion_filter_;
}

void TrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryBuilderOptions& TrajectoryBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryBuilderOptions* TrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptions* n = new TrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) {
    delete trajectory_builder_2d_options_;
  }
  trajectory_builder_2d_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) {
    delete trajectory_builder_3d_options_;
  }
  trajectory_builder_3d_options_ = NULL;
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) {
    delete initial_trajectory_pose_;
  }
  initial_trajectory_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && pure_localization_trimmer_ != NULL) {
    delete pure_localization_trimmer_;
  }
  pure_localization_trimmer_ = NULL;
  if (GetArenaNoVirtual() == NULL && pose_graph_odometry_motion_filter_ != NULL) {
    delete pose_graph_odometry_motion_filter_;
  }
  pose_graph_odometry_motion_filter_ = NULL;
  ::memset(&pure_localization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collate_landmarks_) -
      reinterpret_cast<char*>(&pure_localization_)) + sizeof(collate_landmarks_));
  _internal_metadata_.Clear();
}

bool TrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_2d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_3d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pure_localization = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pure_localization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_trajectory_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pure_localization_trimmer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collate_fixed_frame = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_fixed_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collate_landmarks = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_landmarks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose_graph_odometry_motion_filter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return false;
#undef DO_
}

void TrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->trajectory_builder_2d_options_, output);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_builder_3d_options_, output);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pure_localization(), output);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->initial_trajectory_pose_, output);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pure_localization_trimmer_, output);
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->collate_fixed_frame(), output);
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->collate_landmarks(), output);
  }

  // .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
  if (this->has_pose_graph_odometry_motion_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->pose_graph_odometry_motion_filter_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->trajectory_builder_2d_options_, deterministic, target);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_builder_3d_options_, deterministic, target);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pure_localization(), target);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->initial_trajectory_pose_, deterministic, target);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pure_localization_trimmer_, deterministic, target);
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->collate_fixed_frame(), target);
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->collate_landmarks(), target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
  if (this->has_pose_graph_odometry_motion_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->pose_graph_odometry_motion_filter_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return target;
}

size_t TrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_2d_options_);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_3d_options_);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->initial_trajectory_pose_);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pure_localization_trimmer_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
  if (this->has_pose_graph_odometry_motion_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_graph_odometry_motion_filter_);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions::MergeFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_builder_2d_options()) {
    mutable_trajectory_builder_2d_options()->::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D::MergeFrom(from.trajectory_builder_2d_options());
  }
  if (from.has_trajectory_builder_3d_options()) {
    mutable_trajectory_builder_3d_options()->::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D::MergeFrom(from.trajectory_builder_3d_options());
  }
  if (from.has_initial_trajectory_pose()) {
    mutable_initial_trajectory_pose()->::csmlio::mapping::proto::InitialTrajectoryPose::MergeFrom(from.initial_trajectory_pose());
  }
  if (from.has_pure_localization_trimmer()) {
    mutable_pure_localization_trimmer()->::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(from.pure_localization_trimmer());
  }
  if (from.has_pose_graph_odometry_motion_filter()) {
    mutable_pose_graph_odometry_motion_filter()->::csmlio::mapping::proto::MotionFilterOptions::MergeFrom(from.pose_graph_odometry_motion_filter());
  }
  if (from.pure_localization() != 0) {
    set_pure_localization(from.pure_localization());
  }
  if (from.collate_fixed_frame() != 0) {
    set_collate_fixed_frame(from.collate_fixed_frame());
  }
  if (from.collate_landmarks() != 0) {
    set_collate_landmarks(from.collate_landmarks());
  }
}

void TrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions::CopyFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions::Swap(TrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions::InternalSwap(TrajectoryBuilderOptions* other) {
  using std::swap;
  swap(trajectory_builder_2d_options_, other->trajectory_builder_2d_options_);
  swap(trajectory_builder_3d_options_, other->trajectory_builder_3d_options_);
  swap(initial_trajectory_pose_, other->initial_trajectory_pose_);
  swap(pure_localization_trimmer_, other->pure_localization_trimmer_);
  swap(pose_graph_odometry_motion_filter_, other->pose_graph_odometry_motion_filter_);
  swap(pure_localization_, other->pure_localization_);
  swap(collate_fixed_frame_, other->collate_fixed_frame_);
  swap(collate_landmarks_, other->collate_landmarks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptions

// .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
bool TrajectoryBuilderOptions::has_trajectory_builder_2d_options() const {
  return this != internal_default_instance() && trajectory_builder_2d_options_ != NULL;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_2d_options_ != NULL) delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
}
const ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D& TrajectoryBuilderOptions::trajectory_builder_2d_options() const {
  const ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D* p = trajectory_builder_2d_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D*>(
      &::csmlio::mapping::proto::_LocalTrajectoryBuilderOptions2D_default_instance_);
}
::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::mutable_trajectory_builder_2d_options() {
  
  if (trajectory_builder_2d_options_ == NULL) {
    trajectory_builder_2d_options_ = new ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  return trajectory_builder_2d_options_;
}
::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D* TrajectoryBuilderOptions::release_trajectory_builder_2d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
  
  ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D* temp = trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_2d_options(::csmlio::mapping::proto::LocalTrajectoryBuilderOptions2D* trajectory_builder_2d_options) {
  delete trajectory_builder_2d_options_;
  trajectory_builder_2d_options_ = trajectory_builder_2d_options;
  if (trajectory_builder_2d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_2d_options)
}

// .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
bool TrajectoryBuilderOptions::has_trajectory_builder_3d_options() const {
  return this != internal_default_instance() && trajectory_builder_3d_options_ != NULL;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_3d_options_ != NULL) delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
}
const ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D& TrajectoryBuilderOptions::trajectory_builder_3d_options() const {
  const ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D* p = trajectory_builder_3d_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D*>(
      &::csmlio::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_);
}
::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::mutable_trajectory_builder_3d_options() {
  
  if (trajectory_builder_3d_options_ == NULL) {
    trajectory_builder_3d_options_ = new ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  return trajectory_builder_3d_options_;
}
::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D* TrajectoryBuilderOptions::release_trajectory_builder_3d_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
  
  ::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D* temp = trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_trajectory_builder_3d_options(::csmlio::mapping::proto::LocalTrajectoryBuilderOptions3D* trajectory_builder_3d_options) {
  delete trajectory_builder_3d_options_;
  trajectory_builder_3d_options_ = trajectory_builder_3d_options;
  if (trajectory_builder_3d_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.trajectory_builder_3d_options)
}

// .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
bool TrajectoryBuilderOptions::has_initial_trajectory_pose() const {
  return this != internal_default_instance() && initial_trajectory_pose_ != NULL;
}
void TrajectoryBuilderOptions::clear_initial_trajectory_pose() {
  if (GetArenaNoVirtual() == NULL && initial_trajectory_pose_ != NULL) delete initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
}
const ::csmlio::mapping::proto::InitialTrajectoryPose& TrajectoryBuilderOptions::initial_trajectory_pose() const {
  const ::csmlio::mapping::proto::InitialTrajectoryPose* p = initial_trajectory_pose_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::InitialTrajectoryPose*>(
      &::csmlio::mapping::proto::_InitialTrajectoryPose_default_instance_);
}
::csmlio::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::mutable_initial_trajectory_pose() {
  
  if (initial_trajectory_pose_ == NULL) {
    initial_trajectory_pose_ = new ::csmlio::mapping::proto::InitialTrajectoryPose;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  return initial_trajectory_pose_;
}
::csmlio::mapping::proto::InitialTrajectoryPose* TrajectoryBuilderOptions::release_initial_trajectory_pose() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
  
  ::csmlio::mapping::proto::InitialTrajectoryPose* temp = initial_trajectory_pose_;
  initial_trajectory_pose_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_initial_trajectory_pose(::csmlio::mapping::proto::InitialTrajectoryPose* initial_trajectory_pose) {
  delete initial_trajectory_pose_;
  initial_trajectory_pose_ = initial_trajectory_pose;
  if (initial_trajectory_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.initial_trajectory_pose)
}

// bool pure_localization = 3 [deprecated = true];
void TrajectoryBuilderOptions::clear_pure_localization() {
  pure_localization_ = false;
}
bool TrajectoryBuilderOptions::pure_localization() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
  return pure_localization_;
}
void TrajectoryBuilderOptions::set_pure_localization(bool value) {
  
  pure_localization_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization)
}

// .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
bool TrajectoryBuilderOptions::has_pure_localization_trimmer() const {
  return this != internal_default_instance() && pure_localization_trimmer_ != NULL;
}
void TrajectoryBuilderOptions::clear_pure_localization_trimmer() {
  if (GetArenaNoVirtual() == NULL && pure_localization_trimmer_ != NULL) delete pure_localization_trimmer_;
  pure_localization_trimmer_ = NULL;
}
const ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions::pure_localization_trimmer() const {
  const ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* p = pure_localization_trimmer_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(
      &::csmlio::mapping::proto::_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_);
}
::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::mutable_pure_localization_trimmer() {
  
  if (pure_localization_trimmer_ == NULL) {
    pure_localization_trimmer_ = new ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  return pure_localization_trimmer_;
}
::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* TrajectoryBuilderOptions::release_pure_localization_trimmer() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
  
  ::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* temp = pure_localization_trimmer_;
  pure_localization_trimmer_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_pure_localization_trimmer(::csmlio::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* pure_localization_trimmer) {
  delete pure_localization_trimmer_;
  pure_localization_trimmer_ = pure_localization_trimmer;
  if (pure_localization_trimmer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.pure_localization_trimmer)
}

// bool collate_fixed_frame = 7;
void TrajectoryBuilderOptions::clear_collate_fixed_frame() {
  collate_fixed_frame_ = false;
}
bool TrajectoryBuilderOptions::collate_fixed_frame() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_fixed_frame)
  return collate_fixed_frame_;
}
void TrajectoryBuilderOptions::set_collate_fixed_frame(bool value) {
  
  collate_fixed_frame_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_fixed_frame)
}

// bool collate_landmarks = 8;
void TrajectoryBuilderOptions::clear_collate_landmarks() {
  collate_landmarks_ = false;
}
bool TrajectoryBuilderOptions::collate_landmarks() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_landmarks)
  return collate_landmarks_;
}
void TrajectoryBuilderOptions::set_collate_landmarks(bool value) {
  
  collate_landmarks_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.TrajectoryBuilderOptions.collate_landmarks)
}

// .cartographer.mapping.proto.MotionFilterOptions pose_graph_odometry_motion_filter = 9;
bool TrajectoryBuilderOptions::has_pose_graph_odometry_motion_filter() const {
  return this != internal_default_instance() && pose_graph_odometry_motion_filter_ != NULL;
}
void TrajectoryBuilderOptions::clear_pose_graph_odometry_motion_filter() {
  if (GetArenaNoVirtual() == NULL && pose_graph_odometry_motion_filter_ != NULL) delete pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = NULL;
}
const ::csmlio::mapping::proto::MotionFilterOptions& TrajectoryBuilderOptions::pose_graph_odometry_motion_filter() const {
  const ::csmlio::mapping::proto::MotionFilterOptions* p = pose_graph_odometry_motion_filter_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::MotionFilterOptions*>(
      &::csmlio::mapping::proto::_MotionFilterOptions_default_instance_);
}
::csmlio::mapping::proto::MotionFilterOptions* TrajectoryBuilderOptions::mutable_pose_graph_odometry_motion_filter() {
  
  if (pose_graph_odometry_motion_filter_ == NULL) {
    pose_graph_odometry_motion_filter_ = new ::csmlio::mapping::proto::MotionFilterOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
  return pose_graph_odometry_motion_filter_;
}
::csmlio::mapping::proto::MotionFilterOptions* TrajectoryBuilderOptions::release_pose_graph_odometry_motion_filter() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
  
  ::csmlio::mapping::proto::MotionFilterOptions* temp = pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = NULL;
  return temp;
}
void TrajectoryBuilderOptions::set_allocated_pose_graph_odometry_motion_filter(::csmlio::mapping::proto::MotionFilterOptions* pose_graph_odometry_motion_filter) {
  delete pose_graph_odometry_motion_filter_;
  pose_graph_odometry_motion_filter_ = pose_graph_odometry_motion_filter;
  if (pose_graph_odometry_motion_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptions.pose_graph_odometry_motion_filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorId::kTypeFieldNumber;
const int SensorId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorId::SensorId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SensorId)
}
SensorId::SensorId(const SensorId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SensorId)
}

void SensorId::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

SensorId::~SensorId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SensorId)
  SharedDtor();
}

void SensorId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SensorId::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SensorId& SensorId::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

SensorId* SensorId::New(::google::protobuf::Arena* arena) const {
  SensorId* n = new SensorId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SensorId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SensorId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SensorId.SensorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::csmlio::mapping::proto::SensorId_SensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.SensorId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SensorId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SensorId)
  return false;
#undef DO_
}

void SensorId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SensorId)
}

::google::protobuf::uint8* SensorId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SensorId)
  return target;
}

size_t SensorId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SensorId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SensorId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SensorId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SensorId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SensorId)
    MergeFrom(*source);
  }
}

void SensorId::MergeFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SensorId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorId::CopyFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorId::IsInitialized() const {
  return true;
}

void SensorId::Swap(SensorId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorId::InternalSwap(SensorId* other) {
  using std::swap;
  id_.Swap(&other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SensorId::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SensorId

// .cartographer.mapping.proto.SensorId.SensorType type = 1;
void SensorId::clear_type() {
  type_ = 0;
}
::csmlio::mapping::proto::SensorId_SensorType SensorId::type() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.type)
  return static_cast< ::csmlio::mapping::proto::SensorId_SensorType >(type_);
}
void SensorId::set_type(::csmlio::mapping::proto::SensorId_SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.type)
}

// string id = 2;
void SensorId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SensorId::id() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.SensorId.id)
  return id_.GetNoArena();
}
void SensorId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.SensorId.id)
}
#if LANG_CXX11
void SensorId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.mapping.proto.SensorId.id)
}
#endif
void SensorId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.mapping.proto.SensorId.id)
}
void SensorId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.mapping.proto.SensorId.id)
}
::std::string* SensorId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.SensorId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SensorId::release_id() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.SensorId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SensorId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.SensorId.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptionsWithSensorIds::kSensorIdFieldNumber;
const int TrajectoryBuilderOptionsWithSensorIds::kTrajectoryBuilderOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}
TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds(const TrajectoryBuilderOptionsWithSensorIds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sensor_id_(from.sensor_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_builder_options()) {
    trajectory_builder_options_ = new ::csmlio::mapping::proto::TrajectoryBuilderOptions(*from.trajectory_builder_options_);
  } else {
    trajectory_builder_options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

void TrajectoryBuilderOptionsWithSensorIds::SharedCtor() {
  trajectory_builder_options_ = NULL;
  _cached_size_ = 0;
}

TrajectoryBuilderOptionsWithSensorIds::~TrajectoryBuilderOptionsWithSensorIds() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  SharedDtor();
}

void TrajectoryBuilderOptionsWithSensorIds::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_options_;
}

void TrajectoryBuilderOptionsWithSensorIds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryBuilderOptionsWithSensorIds::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TrajectoryBuilderOptionsWithSensorIds& TrajectoryBuilderOptionsWithSensorIds::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrajectoryBuilderOptionsWithSensorIds* TrajectoryBuilderOptionsWithSensorIds::New(::google::protobuf::Arena* arena) const {
  TrajectoryBuilderOptionsWithSensorIds* n = new TrajectoryBuilderOptionsWithSensorIds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrajectoryBuilderOptionsWithSensorIds::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = NULL;
  _internal_metadata_.Clear();
}

bool TrajectoryBuilderOptionsWithSensorIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return false;
#undef DO_
}

void TrajectoryBuilderOptionsWithSensorIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sensor_id(static_cast<int>(i)), output);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_builder_options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

::google::protobuf::uint8* TrajectoryBuilderOptionsWithSensorIds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sensor_id(static_cast<int>(i)), deterministic, target);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_builder_options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return target;
}

size_t TrajectoryBuilderOptionsWithSensorIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_id(static_cast<int>(i)));
    }
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trajectory_builder_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptionsWithSensorIds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrajectoryBuilderOptionsWithSensorIds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_trajectory_builder_options()) {
    mutable_trajectory_builder_options()->::csmlio::mapping::proto::TrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_options());
  }
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptionsWithSensorIds::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptionsWithSensorIds::Swap(TrajectoryBuilderOptionsWithSensorIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptionsWithSensorIds::InternalSwap(TrajectoryBuilderOptionsWithSensorIds* other) {
  using std::swap;
  sensor_id_.InternalSwap(&other->sensor_id_);
  swap(trajectory_builder_options_, other->trajectory_builder_options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrajectoryBuilderOptionsWithSensorIds::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrajectoryBuilderOptionsWithSensorIds

// repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
int TrajectoryBuilderOptionsWithSensorIds::sensor_id_size() const {
  return sensor_id_.size();
}
void TrajectoryBuilderOptionsWithSensorIds::clear_sensor_id() {
  sensor_id_.Clear();
}
const ::csmlio::mapping::proto::SensorId& TrajectoryBuilderOptionsWithSensorIds::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Get(index);
}
::csmlio::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Mutable(index);
}
::csmlio::mapping::proto::SensorId* TrajectoryBuilderOptionsWithSensorIds::add_sensor_id() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SensorId >*
TrajectoryBuilderOptionsWithSensorIds::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return &sensor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::SensorId >&
TrajectoryBuilderOptionsWithSensorIds::sensor_id() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.sensor_id)
  return sensor_id_;
}

// .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
bool TrajectoryBuilderOptionsWithSensorIds::has_trajectory_builder_options() const {
  return this != internal_default_instance() && trajectory_builder_options_ != NULL;
}
void TrajectoryBuilderOptionsWithSensorIds::clear_trajectory_builder_options() {
  if (GetArenaNoVirtual() == NULL && trajectory_builder_options_ != NULL) delete trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
}
const ::csmlio::mapping::proto::TrajectoryBuilderOptions& TrajectoryBuilderOptionsWithSensorIds::trajectory_builder_options() const {
  const ::csmlio::mapping::proto::TrajectoryBuilderOptions* p = trajectory_builder_options_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return p != NULL ? *p : *reinterpret_cast<const ::csmlio::mapping::proto::TrajectoryBuilderOptions*>(
      &::csmlio::mapping::proto::_TrajectoryBuilderOptions_default_instance_);
}
::csmlio::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::mutable_trajectory_builder_options() {
  
  if (trajectory_builder_options_ == NULL) {
    trajectory_builder_options_ = new ::csmlio::mapping::proto::TrajectoryBuilderOptions;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  return trajectory_builder_options_;
}
::csmlio::mapping::proto::TrajectoryBuilderOptions* TrajectoryBuilderOptionsWithSensorIds::release_trajectory_builder_options() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
  
  ::csmlio::mapping::proto::TrajectoryBuilderOptions* temp = trajectory_builder_options_;
  trajectory_builder_options_ = NULL;
  return temp;
}
void TrajectoryBuilderOptionsWithSensorIds::set_allocated_trajectory_builder_options(::csmlio::mapping::proto::TrajectoryBuilderOptions* trajectory_builder_options) {
  delete trajectory_builder_options_;
  trajectory_builder_options_ = trajectory_builder_options;
  if (trajectory_builder_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds.trajectory_builder_options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllTrajectoryBuilderOptions::kOptionsWithSensorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}
AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions(const AllTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      options_with_sensor_ids_(from.options_with_sensor_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

void AllTrajectoryBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
}

AllTrajectoryBuilderOptions::~AllTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  SharedDtor();
}

void AllTrajectoryBuilderOptions::SharedDtor() {
}

void AllTrajectoryBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTrajectoryBuilderOptions::descriptor() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AllTrajectoryBuilderOptions& AllTrajectoryBuilderOptions::default_instance() {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::InitDefaults();
  return *internal_default_instance();
}

AllTrajectoryBuilderOptions* AllTrajectoryBuilderOptions::New(::google::protobuf::Arena* arena) const {
  AllTrajectoryBuilderOptions* n = new AllTrajectoryBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AllTrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_with_sensor_ids_.Clear();
  _internal_metadata_.Clear();
}

bool AllTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_options_with_sensor_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return false;
#undef DO_
}

void AllTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_with_sensor_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->options_with_sensor_ids(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

::google::protobuf::uint8* AllTrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_with_sensor_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->options_with_sensor_ids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return target;
}

size_t AllTrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->options_with_sensor_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options_with_sensor_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTrajectoryBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AllTrajectoryBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void AllTrajectoryBuilderOptions::MergeFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_with_sensor_ids_.MergeFrom(from.options_with_sensor_ids_);
}

void AllTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTrajectoryBuilderOptions::CopyFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void AllTrajectoryBuilderOptions::Swap(AllTrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllTrajectoryBuilderOptions::InternalSwap(AllTrajectoryBuilderOptions* other) {
  using std::swap;
  options_with_sensor_ids_.InternalSwap(&other->options_with_sensor_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AllTrajectoryBuilderOptions::GetMetadata() const {
  protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AllTrajectoryBuilderOptions

// repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
int AllTrajectoryBuilderOptions::options_with_sensor_ids_size() const {
  return options_with_sensor_ids_.size();
}
void AllTrajectoryBuilderOptions::clear_options_with_sensor_ids() {
  options_with_sensor_ids_.Clear();
}
const ::csmlio::mapping::proto::TrajectoryBuilderOptionsWithSensorIds& AllTrajectoryBuilderOptions::options_with_sensor_ids(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Get(index);
}
::csmlio::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids(int index) {
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Mutable(index);
}
::csmlio::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* AllTrajectoryBuilderOptions::add_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >*
AllTrajectoryBuilderOptions::mutable_options_with_sensor_ids() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return &options_with_sensor_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::csmlio::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >&
AllTrajectoryBuilderOptions::options_with_sensor_ids() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.AllTrajectoryBuilderOptions.options_with_sensor_ids)
  return options_with_sensor_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace csmlio

// @@protoc_insertion_point(global_scope)
